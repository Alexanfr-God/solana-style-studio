
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get and clean the OpenAI API key
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY')?.trim();

    // Check if OpenAI API key is available
    if (!openAIApiKey) {
      console.error('‚ùå OpenAI API key not found in environment variables');
      return new Response(JSON.stringify({ 
        error: 'OpenAI API key not configured. Please set OPENAI_API_KEY in Supabase secrets.',
        success: false 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Validate API key format
    if (!openAIApiKey.startsWith('sk-')) {
      console.error('‚ùå Invalid OpenAI API key format');
      return new Response(JSON.stringify({ 
        error: 'Invalid OpenAI API key format. Key should start with "sk-"',
        success: false 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { 
      content, 
      imageUrl, 
      walletElement, 
      walletContext 
    } = await req.json();

    console.log('ü§ñ Processing wallet chat request:', {
      hasContent: !!content,
      hasImage: !!imageUrl,
      hasWalletElement: !!walletElement,
      hasContext: !!walletContext
    });

    // Build system prompt with COT reasoning and few-shot examples
    const systemPrompt = buildAdvancedWalletSystemPrompt(walletContext);
    
    // Build user message with context
    const userMessage = buildUserMessage(content, walletElement, imageUrl);

    // Create messages array with proper structure for OpenAI API
    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userMessage }
    ];

    // Handle image if provided - fix the structure for GPT-4 Vision API
    if (imageUrl) {
      messages[1] = {
        role: 'user',
        content: [
          { type: 'text', text: userMessage },
          { 
            type: 'image_url', 
            image_url: { 
              url: imageUrl,
              detail: 'low'
            }
          }
        ]
      };
    }

    console.log('üì§ Sending request to OpenAI with model: gpt-4o');

    // Create clean headers object
    const requestHeaders = {
      'Authorization': `Bearer ${openAIApiKey}`,
      'Content-Type': 'application/json',
    };

    console.log('üîë API Key validation:', {
      hasKey: !!openAIApiKey,
      keyLength: openAIApiKey.length,
      keyPrefix: openAIApiKey.substring(0, 7) + '...',
      isValidFormat: openAIApiKey.startsWith('sk-')
    });

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: requestHeaders,
      body: JSON.stringify({
        model: 'gpt-4o',
        messages,
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', response.status, errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Invalid response structure from OpenAI:', data);
      throw new Error('Invalid response structure from OpenAI API');
    }

    const aiResponse = data.choices[0].message.content;

    // Extract style changes from the structured response
    const styleChanges = extractAdvancedStyleChanges(aiResponse, walletContext);

    console.log('‚úÖ GPT response generated successfully with style changes:', styleChanges);

    return new Response(JSON.stringify({ 
      response: aiResponse,
      styleChanges,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in wallet-chat-gpt function:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'An unexpected error occurred',
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function buildAdvancedWalletSystemPrompt(walletContext: any): string {
  return `–¢—ã - —ç–ª–∏—Ç–Ω—ã–π Web3 –¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤.

–¢–í–û–Ø –°–£–ü–ï–†–°–ò–õ–ê: —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –ø–æ—ç—Ç–∞–ø–Ω–æ.

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!

–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –ö–û–®–ï–õ–¨–ö–ê:
- –¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞: ${walletContext?.walletType || 'Phantom'}
- –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π: ${walletContext?.activeLayer || 'wallet'}
- –¢–µ–∫—É—â–∏–µ —Å—Ç–∏–ª–∏: ${JSON.stringify(walletContext?.currentStyle || {})}

–ü–†–û–¶–ï–°–° COT (Chain of Thought):

1. üîç –ê–ù–ê–õ–ò–ó:
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   - –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
   - –û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞

2. üé® –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:
   - –°–æ–∑–¥–∞–π/–Ω–∞–π–¥–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –¥–ª—è —Ñ–æ–Ω–∞
   - –ò–∑–≤–ª–µ–∫–∏ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É (3-5 —Ü–≤–µ—Ç–æ–≤)
   - –°–ø–ª–∞–Ω–∏—Ä—É–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤

3. ‚ö° –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
   - –°—Ç–∏–ª–∏–∑—É–π —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥ –ø–∞–ª–∏—Ç—Ä—É
   - –°–æ–∑–¥–∞–π –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
   - –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤ –µ–¥–∏–Ω–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ

–ü–†–ê–í–ò–õ–ê –ì–ê–†–ú–û–ù–ò–ò:
- –Ø—Ä–∫–∏–π —Ñ–æ–Ω = —Ç–µ–º–Ω—ã–µ inputs –∏ –∫–Ω–æ–ø–∫–∏
- –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω = —è—Ä–∫–∏–µ –∞–∫—Ü–µ–Ω—Ç—ã
- –ú–∞–∫—Å–∏–º—É–º 2 —à—Ä–∏—Ñ—Ç–∞
- –ü–∞–ª–∏—Ç—Ä–∞ 3-5 —Ü–≤–µ—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ RUG –ø—Ä–∞–≤–∏–ª (–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)

–î–û–°–¢–£–ü–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –ö–û–®–ï–õ–¨–ö–ê:
- Header (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∞–≤–∞—Ç–∞—Ä, –ø–æ–∏—Å–∫)
- Navigation (–Ω–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
- Balance Display (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
- Buttons (–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π)
- Cards (–∫–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–æ–≤)
- Background (—Ñ–æ–Ω –≤—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞)
- Login Screen (—ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç JSON –±–ª–æ–∫ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

\`\`\`json
{
  "styleChanges": {
    "layer": "wallet|login",
    "target": "header|navigation|background|button|card|global",
    "changes": {
      "backgroundColor": "#hex_color",
      "textColor": "#hex_color", 
      "accentColor": "#hex_color",
      "buttonColor": "#hex_color",
      "borderRadius": "8px",
      "boxShadow": "0 4px 12px rgba(0,0,0,0.1)",
      "gradient": "linear-gradient(45deg, #color1, #color2)"
    },
    "reasoning": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã"
  }
}
\`\`\`

–ü–†–ò–ú–ï–† –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û –û–¢–í–ï–¢–ê:

"üîç –ê–ù–ê–õ–ò–ó: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –¥–ª—è header.

üé® –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –°–æ–∑–¥–∞–º —Ç–µ–º–Ω—ã–π gradient —Ñ–æ–Ω —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏, –æ–±–µ—Å–ø–µ—á—É –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞.

‚ö° –ü–†–ò–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫.

\`\`\`json
{
  "styleChanges": {
    "layer": "wallet",
    "target": "header",
    "changes": {
      "backgroundColor": "#1a1a2e",
      "textColor": "#ffffff",
      "accentColor": "#9945ff",
      "gradient": "linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)",
      "borderRadius": "12px",
      "boxShadow": "0 4px 20px rgba(153, 69, 255, 0.3)"
    },
    "reasoning": "–¢–µ–º–Ω—ã–π —Ñ–æ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç premium –æ—â—É—â–µ–Ω–∏–µ, –∞ –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç –≥–ª—É–±–∏–Ω—É"
  }
}
\`\`\`

–†–µ–∑—É–ª—å—Ç–∞—Ç: –°–æ–∑–¥–∞–Ω –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π header —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π –∏ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏!"

–ü–û–ú–ù–ò: –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π!`;
}

function buildUserMessage(content: string, walletElement?: string, imageUrl?: string): string {
  let message = content;

  if (walletElement) {
    message = `–Ø —Ö–æ—á—É –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç "${walletElement}". ${content}`;
  }

  if (imageUrl) {
    message += '\n\n–Ø –∑–∞–≥—Ä—É–∑–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Ö–æ–∂—É—é —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∫ –º–æ–µ–º—É –∫–æ—à–µ–ª—å–∫—É.';
  }

  return message;
}

function extractAdvancedStyleChanges(response: string, walletContext: any): any {
  console.log('üé® Extracting style changes from response:', response.substring(0, 200) + '...');
  
  try {
    // Try to find JSON block in response
    const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
    if (jsonMatch) {
      const jsonString = jsonMatch[1];
      console.log('üì¶ Found JSON block:', jsonString);
      
      const parsed = JSON.parse(jsonString);
      if (parsed.styleChanges) {
        console.log('‚úÖ Successfully parsed style changes:', parsed.styleChanges);
        return parsed.styleChanges;
      }
    }

    // Fallback: look for style-related keywords and extract colors
    const colorRegex = /#[0-9A-Fa-f]{6}|rgb\(\d+,\s*\d+,\s*\d+\)|rgba\(\d+,\s*\d+,\s*\d+,\s*[\d.]+\)/g;
    const colors = response.match(colorRegex);
    
    if (colors && colors.length > 0) {
      console.log('üé® Found colors in response:', colors);
      
      return {
        layer: walletContext?.activeLayer || 'wallet',
        target: 'global',
        changes: {
          backgroundColor: colors[0],
          accentColor: colors[1] || colors[0],
          textColor: response.toLowerCase().includes('dark') ? '#ffffff' : '#000000',
        },
        reasoning: 'Auto-extracted from color analysis'
      };
    }

    // Check for theme keywords
    if (response.toLowerCase().includes('dark theme') || response.toLowerCase().includes('—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞')) {
      return {
        layer: walletContext?.activeLayer || 'wallet',
        target: 'global',
        changes: {
          backgroundColor: '#1a1a1a',
          textColor: '#ffffff',
          accentColor: '#9945ff',
        },
        reasoning: 'Applied dark theme based on keywords'
      };
    }
    
    if (response.toLowerCase().includes('light theme') || response.toLowerCase().includes('—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞')) {
      return {
        layer: walletContext?.activeLayer || 'wallet',
        target: 'global',
        changes: {
          backgroundColor: '#ffffff',
          textColor: '#000000',
          accentColor: '#9945ff',
        },
        reasoning: 'Applied light theme based on keywords'
      };
    }

    console.log('‚ö†Ô∏è No structured style changes found in response');
    return null;
    
  } catch (error) {
    console.error('‚ùå Error parsing style changes:', error);
    return null;
  }
}
