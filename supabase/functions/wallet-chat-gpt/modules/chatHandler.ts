import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { createWalletManager } from './walletManager.ts';
import { createStyleAnalyzer } from './styleAnalyzer.ts';
import { AdvancedJSONParser } from '../utils/json-parser.ts';
import { createAdvancedPromptBuilder } from '../utils/prompt-builder.ts';

export class ChatHandler {
  supabase;
  walletManager;
  styleAnalyzer;
  promptBuilder;
  intentCache = new Map();
  conversationCache = new Map();

  constructor(supabaseUrl, supabaseKey) {
    this.supabase = createClient(supabaseUrl, supabaseKey);
    this.walletManager = createWalletManager(supabaseUrl, supabaseKey);
    this.styleAnalyzer = createStyleAnalyzer(supabaseUrl, supabaseKey);
    this.promptBuilder = createAdvancedPromptBuilder();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  updateContextMemory(context, message) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º contextMemory –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!context.contextMemory) {
      context.contextMemory = {
        conversationFlow: [],
        mentionedElements: new Set(),
        recentIntents: [],
        appliedStyles: new Map()
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    context.contextMemory.conversationFlow.push(message.slice(0, 30));
    if (context.contextMemory.conversationFlow.length > 10) {
      context.contextMemory.conversationFlow = context.contextMemory.conversationFlow.slice(-10);
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = this.extractElementsFromMessage(message.toLowerCase());
    elements.forEach(el => context.contextMemory.mentionedElements.add(el));

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    if (context.contextMemory.mentionedElements.size > 20) {
      const elementsArray = Array.from(context.contextMemory.mentionedElements);
      context.contextMemory.mentionedElements = new Set(elementsArray.slice(-20));
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    const oneHourAgo = Date.now() - (60 * 60 * 1000);
    context.contextMemory.recentIntents = context.contextMemory.recentIntents.filter(
      intent => new Date(intent.timestamp).getTime() > oneHourAgo
    );
  }

  /**
   * ‚úÖ –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ë–ï–ó –ê–í–¢–û–ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê –ì–ï–ù–ï–†–ê–¶–ò–Æ
   */
  async handleChat(message, context, imageUrl) {
    const startTime = Date.now();
    console.log('üí¨ Processing enhanced chat message...');
    console.log('üö´ [CHAT] Image generation allowed:', context.settings?.allowImageGeneration || false);

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (!context.settings) {
        context.settings = {
          allowImageGeneration: false, // ‚úÖ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –ó–ê–ü–†–ï–©–ï–ù–û!
          maxHistoryLength: 50,
          enableProactiveHelp: true,
          responseStyle: 'casual'
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
      this.updateContextMemory(context, message);

      // ‚úÖ –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ë–ï–ó –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      const intent = await this.detectUserIntentSafe(message, context, imageUrl);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      context.conversationHistory.push({
        id: messageId,
        role: 'user',
        content: message,
        timestamp: new Date().toISOString(),
        metadata: {
          intent: intent.type,
          confidence: intent.confidence,
          imageUrl
        }
      });

      // –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
      if (context.conversationHistory.length > context.settings.maxHistoryLength) {
        context.conversationHistory = context.conversationHistory.slice(-context.settings.maxHistoryLength);
      }

      // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø - –ë–ï–ó –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
      let response;
      switch (intent.type) {
        case 'style_analysis':
          response = await this.handleStyleAnalysisEnhanced(message, imageUrl, context, intent);
          break;
          
        case 'element_customization':
          response = await this.handleElementCustomizationEnhanced(message, context, intent);
          break;
          
        case 'image_generation':
          // ‚úÖ –ë–õ–û–ö–ò–†–£–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ –í –ß–ê–¢–ï!
          console.log('üö´ [CHAT] Image generation blocked - redirecting to proper mode');
          response = await this.handleImageGenerationBlocked(message, context, intent);
          break;
          
        case 'tutorial':
          response = await this.handleTutorialMode(message, context, intent);
          break;
          
        case 'troubleshooting':
          response = await this.handleTroubleshooting(message, context, intent);
          break;
          
        case 'comparison':
          response = await this.handleWalletComparison(message, context, intent);
          break;
          
        case 'export_settings':
          response = await this.handleExportSettings(message, context, intent);
          break;
          
        case 'general_chat':
        default:
          response = await this.handleGeneralChatEnhanced(message, context, intent);
          break;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      const responseMessageId = `resp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      context.conversationHistory.push({
        id: responseMessageId,
        role: 'assistant',
        content: response.message,
        timestamp: new Date().toISOString(),
        metadata: {
          intent: intent.type,
          confidence: intent.confidence,
          generatedElements: response.data?.affectedElements,
          styleChanges: response.data?.styleChanges,
          actions: response.data?.actions
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      this.conversationCache.set(context.sessionId, context);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const suggestions = await this.generateProactiveSuggestions(context, intent);
      const followUpQuestions = this.generateFollowUpQuestions(intent, response.data);

      const processingTime = Date.now() - startTime;

      return {
        success: true,
        message: response.message,
        action: intent.type,
        data: response.data,
        suggestions,
        followUpQuestions,
        tutorialSteps: response.tutorialSteps,
        context,
        metadata: {
          intent,
          processingTime,
          confidence: intent.confidence
        }
      };

    } catch (error) {
      console.error('‚ùå Error in enhanced chat handler:', error);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      context.conversationHistory.push({
        id: `error_${Date.now()}`,
        role: 'system',
        content: `Error: ${error.message}`,
        timestamp: new Date().toISOString()
      });

      return {
        success: false,
        message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!',
        action: 'general_chat',
        data: { error: error.message },
        context,
        metadata: {
          intent: { type: 'general_chat', confidence: 0, priority: 'low' },
          processingTime: Date.now() - startTime,
          confidence: 0
        }
      };
    }
  }

  /**
   * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê–ú–ï–†–ï–ù–ò–Ø –ë–ï–ó –ê–í–¢–û–ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø
   */
  async detectUserIntentSafe(message, context, imageUrl) {
    const cacheKey = `${message.toLowerCase().slice(0, 50)}_${!!imageUrl}`;
    
    if (this.intentCache.has(cacheKey)) {
      return this.intentCache.get(cacheKey);
    }

    // ‚úÖ –í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú OpenAI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log('üõ°Ô∏è [CHAT] Using safe fallback intent detection - NO AI redirection');
    
    const intent = this.getFallbackIntentSafe(message, imageUrl);
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.intentCache.set(cacheKey, intent);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (!context.contextMemory) {
      context.contextMemory = {
        conversationFlow: [],
        mentionedElements: new Set(),
        recentIntents: [],
        appliedStyles: new Map()
      };
    }
    
    context.contextMemory.recentIntents.push({
      intent: intent.type,
      timestamp: new Date().toISOString(),
      confidence: intent.confidence
    });
    
    return intent;
  }

  /**
   * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô FALLBACK –ë–ï–ó –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê –ì–ï–ù–ï–†–ê–¶–ò–Æ
   */
  getFallbackIntentSafe(message, imageUrl) {
    const msg = message.toLowerCase();
    
    // ‚úÖ –ë–õ–û–ö–ò–†–£–ï–ú –î–ï–¢–ï–ö–¶–ò–Æ –ì–ï–ù–ï–†–ê–¶–ò–ò –í –ß–ê–¢–ï
    const hasGenerationKeywords = (
      msg.includes('generate') || 
      msg.includes('create image') || 
      msg.includes('–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å') || 
      msg.includes('—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') ||
      msg.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π') ||
      msg.includes('—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É')
    );
    
    if (hasGenerationKeywords) {
      console.log('üö´ [CHAT] Generation keywords detected but BLOCKED in chat mode');
      return {
        type: 'image_generation',
        confidence: 0.9,
        priority: 'high',
        blocked: true, // ‚úÖ –í–ê–ñ–ù–´–ô –§–õ–ê–ì!
        reason: 'Image generation not allowed in chat mode'
      };
    }

    // Style analysis keywords
    if (imageUrl || msg.includes('–∞–Ω–∞–ª–∏–∑') || msg.includes('—Å—Ç–∏–ª—å') || msg.includes('—Ü–≤–µ—Ç') || msg.includes('–ø–∞–ª–∏—Ç—Ä–∞')) {
      return {
        type: 'style_analysis',
        confidence: 0.7,
        priority: 'medium',
        requiresImage: !!imageUrl
      };
    }

    // Element customization keywords
    if (msg.includes('–∫–Ω–æ–ø–∫') || msg.includes('—Ñ–æ–Ω') || msg.includes('–∏–∑–º–µ–Ω–∏') || msg.includes('–Ω–∞—Å—Ç—Ä–æ–π')) {
      return {
        type: 'element_customization',
        confidence: 0.8,
        priority: 'high',
        elements: this.extractElementsFromMessage(msg)
      };
    }

    // Tutorial keywords
    if (msg.includes('–∫–∞–∫') || msg.includes('–ø–æ–º–æ—â') || msg.includes('–Ω–∞—É—á–∏') || msg.includes('–æ–±—ä—è—Å–Ω–∏')) {
      return {
        type: 'tutorial',
        confidence: 0.7,
        priority: 'medium'
      };
    }

    return {
      type: 'general_chat',
      confidence: 0.5,
      priority: 'low'
    };
  }

  /**
   * ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò
   */
  async handleImageGenerationBlocked(message, context, intent) {
    console.log('üö´ [CHAT] Handling blocked image generation request');
    
    const language = message.includes('–≥–µ–Ω–µ—Ä') || message.includes('—Å–æ–∑–¥–∞–π') ? 'ru' : 'en';
    
    const responses = {
      ru: {
        message: `–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé®
        
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:
‚Ä¢ **Leonardo —Ä–µ–∂–∏–º** - –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
‚Ä¢ **Replicate —Ä–µ–∂–∏–º** - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —è –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ–º–æ—á—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–∏–ª–µ–π –∫–æ—à–µ–ª—å–∫–∞.`,
        suggestions: [
          '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Leonardo',
          '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Replicate', 
          '–ü–æ–º–æ—á—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤',
          '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π'
        ]
      },
      en: {
        message: `I understand you want to create an image! üé®
        
For image generation, please use the specialized mode:
‚Ä¢ **Leonardo mode** - for high quality and realistic images
‚Ä¢ **Replicate mode** - for fast generation and stylized images

Switch to one of these modes and repeat your request. In chat mode, I can only help with wallet style settings.`,
        suggestions: [
          'Switch to Leonardo',
          'Switch to Replicate',
          'Help with color settings', 
          'Show style examples'
        ]
      }
    };
    
    const response = responses[language];
    
    return {
      message: response.message,
      data: {
        action: 'mode_switch_required',
        requiredModes: ['leonardo', 'replicate'],
        originalRequest: message,
        suggestions: response.suggestions,
        blocked: true
      }
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  extractElementsFromMessage(message) {
    const elements = [];
    const elementKeywords = {
      '–∫–Ω–æ–ø–∫': 'button',
      '—Ñ–æ–Ω': 'background', 
      '—Ç–µ–∫—Å—Ç': 'text',
      '–∏–∫–æ–Ω–∫': 'icon',
      '–º–µ–Ω—é': 'navigation',
      '–∑–∞–≥–æ–ª–æ–≤': 'header',
      '–ø–æ–¥–≤–∞–ª': 'footer'
    };

    for (const [keyword, element] of Object.entries(elementKeywords)) {
      if (message.includes(keyword)) {
        elements.push(element);
      }
    }
    
    return elements;
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª–µ–π
   */
  async handleStyleAnalysisEnhanced(message, imageUrl, context, intent) {
    console.log('üé® Handling enhanced style analysis...');
    
    let analysis;
    if (imageUrl) {
      analysis = await this.styleAnalyzer.analyzeImageStyle(imageUrl);
    } else {
      analysis = await this.styleAnalyzer.analyzeTextStyle(message);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å—Ç–∏–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.stylePreferences = analysis;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –∫–æ—à–µ–ª—å–∫–æ–º
    const walletContext = await this.walletManager.createWalletAIContext(context.walletType);
    const compatibility = this.analyzeStyleCompatibility(analysis, walletContext);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateStyleRecommendations(analysis, context.userProfile);

    return {
      message: `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª ${imageUrl ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ'} –∏ —Å–æ–∑–¥–∞–ª —Å—Ç–∏–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É.
      
üé® **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å**: ${analysis.theme} —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º "${analysis.mood}"
üéØ **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**: ${compatibility.score}/10 —Å –≤–∞—à–∏–º ${context.walletType} –∫–æ—à–µ–ª—å–∫–æ–º
      
–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`,
      data: {
        styleAnalysis: analysis,
        compatibility,
        recommendations,
        suggestedActions: [
          '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º—É –∫–æ—à–µ–ª—å–∫—É',
          '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º', 
          '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é',
          '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'
        ]
      }
    };
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  async handleElementCustomizationEnhanced(message, context, intent) {
    console.log('üîß Handling enhanced element customization...');
    
    // –ü–æ–ª—É—á–∞–µ–º AI –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
    const aiContext = await this.walletManager.createWalletAIContext(context.walletType, context.activeScreen);
    
    // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–∞
    const styleChanges = await this.generateSmartStyleChanges(message, context, aiContext, intent);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
    if (!context.contextMemory) {
      context.contextMemory = {
        conversationFlow: [],
        mentionedElements: new Set(),
        recentIntents: [],
        appliedStyles: new Map()
      };
    }
    
    context.contextMemory.appliedStyles.set(Date.now().toString(), styleChanges);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º—è–Ω—É—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–º—è—Ç—å
    if (intent.elements) {
      intent.elements.forEach(el => context.contextMemory.mentionedElements.add(el));
    }

    const affectedElements = intent.elements || ['background', 'buttons'];
    const complexity = aiContext.complexity;

    return {
      message: `–ì–æ—Ç–æ–≤–æ! –Ø –ø—Ä–∏–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ ${affectedElements.join(', ')}. 
      
‚ú® **–ò–∑–º–µ–Ω–µ–Ω–∏—è**: ${styleChanges.styleNotes}
üéØ **–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤**: ${affectedElements.length}
      
${complexity === 'high' ? 'üí° **–°–æ–≤–µ—Ç**: –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!' : ''}

–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?`,
      data: {
        styleChanges,
        affectedElements, 
        preview: true,
        nextSuggestions: this.generateNextStepSuggestions(styleChanges, aiContext)
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
   */
  async handleTutorialMode(message, context, intent) {
    console.log('üìö Handling tutorial mode...');
    
    const tutorialSteps = this.generateTutorialSteps(message, context);
    
    return {
      message: `–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ ${tutorialSteps.goal}:`,
      data: {
        tutorial: tutorialSteps,
        currentStep: 0,
        totalSteps: tutorialSteps.steps.length
      },
      tutorialSteps: tutorialSteps.steps
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–æ–∫
   */
  async handleTroubleshooting(message, context, intent) {
    console.log('üîß Handling troubleshooting...');
    
    const issue = this.identifyIssue(message);
    const solutions = await this.generateSolutions(issue, context);
    
    return {
      message: `–ü–æ–Ω—è–ª –ø—Ä–æ–±–ª–µ–º—É! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–π:`,
      data: {
        issue,
        solutions,
        priority: intent.priority
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async handleWalletComparison(message, context, intent) {
    console.log('‚öñÔ∏è Handling wallet comparison...');
    
    const walletsToCompare = this.extractWalletTypesFromMessage(message);
    if (walletsToCompare.length < 2) {
      walletsToCompare.push(context.walletType);
    }
    
    const comparison = await this.walletManager.compareWallets(walletsToCompare[0], walletsToCompare[1]);
    
    return {
      message: `–í–æ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ${walletsToCompare[0]} –∏ ${walletsToCompare[1]}:`,
      data: {
        comparison,
        wallets: walletsToCompare
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async handleExportSettings(message, context, intent) {
    console.log('üì§ Handling export settings...');
    
    const exportData = await this.walletManager.exportWalletConfig(context.walletType);
    
    return {
      message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã! –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏.`,
      data: {
        export: exportData,
        fileName: `${context.walletType}_settings_${new Date().toISOString().split('T')[0]}.json`
      }
    };
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞
   */
  async handleGeneralChatEnhanced(message, context, intent) {
    console.log('üí¨ Handling enhanced general chat...');
    
    const openaiApiKey = Deno.env.get('OPENA_API_KEY');
    
    if (!openaiApiKey) {
      return this.getFallbackChatResponse(message, context);
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const systemPrompt = this.buildPersonalizedSystemPrompt(context);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages: [
            { role: 'system', content: systemPrompt },
            ...context.conversationHistory.slice(-5).map(msg => ({
              role: msg.role,
              content: msg.content
            })),
            { role: 'user', content: message }
          ],
          max_tokens: 400,
          temperature: 0.7
        })
      });

      const aiResponse = await response.json();
      const content = aiResponse.choices[0].message.content;

      return {
        message: content,
        data: {
          suggestions: await this.generateContextualSuggestions(context),
          walletInfo: await this.getRelevantWalletInfo(context.walletType)
        }
      };
    } catch (error) {
      console.error('Error in general chat:', error);
      return this.getFallbackChatResponse(message, context);
    }
  }

  // ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ======

  analyzeStyleCompatibility(analysis, walletContext) {
    let score = 7; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    if (analysis.theme === 'dark' && walletContext.walletConfiguration.capabilities.darkMode) {
      score += 1;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    if (walletContext.walletConfiguration.capabilities.customColors) {
      score += 1;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–Ω–∏–º–∞—Ü–∏–π
    if (analysis.complexity === 'complex' && walletContext.walletConfiguration.capabilities.animations) {
      score += 1;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    score = Math.min(score, 10);
    
    return {
      score,
      supported: score >= 7,
      recommendations: score < 7 ? [
        '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∏–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å —É–ø—Ä–æ—â–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã'
      ] : [
        '–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!',
        '–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∏–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'
      ]
    };
  }

  generateStyleRecommendations(analysis, userProfile) {
    const recommendations = [];
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
    if (analysis.theme === 'dark') {
      recommendations.push('–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    }
    
    if (analysis.mood === 'professional') {
      recommendations.push('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–¥—á–µ—Ä–∫–Ω–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∫—Ä–∏–ø—Ç–æ–æ–ø–µ—Ä–∞—Ü–∏–π');
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile?.preferences.complexity === 'beginner') {
      recommendations.push('–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º');
    }
    
    if (userProfile?.history.favoriteColors?.includes(analysis.colorPalette.primary)) {
      recommendations.push('–≠—Ç–æ—Ç —Ü–≤–µ—Ç –æ—Ç–ª–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏!');
    }
    
    return recommendations.slice(0, 3);
  }

  async generateSmartStyleChanges(message, context, aiContext, intent) {
    // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ AI
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI –∏–ª–∏ –¥—Ä—É–≥—É—é ML –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
    return {
      styleNotes: '–ò–∑–º–µ–Ω–µ–Ω—ã —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ñ–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É',
      changes: {
        buttonColor: '#FF5733',
        backgroundColor: '#1A1A1A'
      }
    };
  }

  generateNextStepSuggestions(styleChanges, aiContext) {
    return [
      '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', 
      '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å—Ç–∏–ª—é'
    ];
  }

  generateTutorialSteps(message, context) {
    return {
      goal: '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞',
      steps: [
        '–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞',
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
      ]
    };
  }

  identifyIssue(message) {
    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (message.toLowerCase().includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')) {
      return '–§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞';
  }

  async generateSolutions(issue, context) {
    // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π
    if (issue === '–§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç') {
      return [
        '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        '–û–±–Ω–æ–≤–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏'
      ];
    }
    return ['–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏'];
  }

  extractWalletTypesFromMessage(message) {
    const wallets = [];
    const knownWallets = ['MetaMask', 'Trust Wallet', 'Coinbase Wallet', 'Rainbow', 'Phantom'];
    
    knownWallets.forEach(wallet => {
      if (message.toLowerCase().includes(wallet.toLowerCase())) {
        wallets.push(wallet);
      }
    });
    
    return wallets;
  }

  async generateProactiveSuggestions(context, intent) {
    if (!context.settings.enableProactiveHelp) return [];
    
    // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    return [
      '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π?',
      '–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–π',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫?'
    ];
  }

  generateFollowUpQuestions(intent, data) {
    if (intent.type === 'style_analysis') {
      return [
        '–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å?',
        '–ù—É–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é?'
      ];
    }
    
    if (intent.type === 'element_customization') {
      return [
        '–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã?',
        '–ù—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?'
      ];
    }
    
    return [];
  }

  getFallbackChatResponse(message, context) {
    return {
      success: true,
      message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∏–ª—è.',
      action: 'general_chat',
      data: {},
      context,
      metadata: {
        intent: { type: 'general_chat', confidence: 0, priority: 'low' },
        processingTime: 0,
        confidence: 0
      }
    };
  }

  async getRelevantWalletInfo(walletType) {
    // –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    return {
      name: walletType,
      version: '1.2.3',
      features: ['darkMode', 'customColors', 'animations']
    };
  }

  async generateContextualSuggestions(context) {
    return [
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫',
      '–î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX',
      '–°—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏'
    ];
  }

  buildPersonalizedSystemPrompt(context) {
    const userLevel = context.userProfile?.preferences.complexity || 'intermediate';
    const preferredStyle = context.userProfile?.preferences.style || 'modern';
    const responseStyle = context.settings.responseStyle || 'casual';
    
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ Web3 –∫–æ—à–µ–ª—å–∫–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ ${context.walletType}.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –£—Ä–æ–≤–µ–Ω—å: ${userLevel}
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å: ${preferredStyle}
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${responseStyle}
- –ê–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: ${context.activeScreen || '–æ—Å–Ω–æ–≤–Ω–æ–π'}

${userLevel === 'beginner' ? '–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∏–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.' : ''}
${userLevel === 'advanced' ? '–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.' : ''}

–û—Ç–≤–µ—á–∞–π ${responseStyle === 'casual' ? '–¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ' : responseStyle === 'professional' ? '—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ' : '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ'}.

–í–ê–ñ–ù–û: –¢—ã –ù–ï –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Leonardo –∏–ª–∏ Replicate —Ä–µ–∂–∏–º.

–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –±—É–¥—å –≥–æ—Ç–æ–≤ –∫ follow-up –≤–æ–ø—Ä–æ—Å–∞–º.`;
  }
}

// Factory function for creating ChatHandler instance
export function createChatHandler(supabaseUrl, supabaseKey) {
  return new ChatHandler(supabaseUrl, supabaseKey);
}
