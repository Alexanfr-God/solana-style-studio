import { IconManager } from './iconManager.ts';

export interface IconChatContext {
  action: 'list' | 'replace' | 'batch_replace' | 'info' | 'help';
  category?: string;
  element_id?: string;
  icon_group?: string;
  element_name?: string;
}

export class IconChatHandler {
  private iconManager: IconManager;

  constructor(iconManager: IconManager) {
    this.iconManager = iconManager;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤
  private checkIconLibEnabled(): boolean {
    return Deno.env.get('ICON_LIB_ENABLED') === 'true';
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–±–æ—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
  analyzeIconRequest(message: string): IconChatContext | null {
    // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞
    if (!this.checkIconLibEnabled()) {
      console.log('üö´ Icon analysis blocked - feature disabled');
      return null;
    }

    const lowerMessage = message.toLowerCase();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏
    const patterns = {
      list: [
        '–ø–æ–∫–∞–∂–∏ –∏–∫–æ–Ω–∫–∏', '—Å–ø–∏—Å–æ–∫ –∏–∫–æ–Ω–æ–∫', '–∫–∞–∫–∏–µ –∏–∫–æ–Ω–∫–∏', 'show icons', 'list icons',
        '–∏–∫–æ–Ω–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', '–∏–∫–æ–Ω–∫–∏ sidebar', '–∏–∫–æ–Ω–∫–∏ –ø–æ–∏—Å–∫–∞'
      ],
      replace: [
        '–ø–æ–º–µ–Ω—è–π –∏–∫–æ–Ω–∫—É', '–∑–∞–º–µ–Ω–∏ –∏–∫–æ–Ω–∫—É', 'change icon', 'replace icon',
        '–æ–±–Ω–æ–≤–∏ –∏–∫–æ–Ω–∫—É', '–∑–∞–≥—Ä—É–∑–∏ –∏–∫–æ–Ω–∫—É'
      ],
      batch_replace: [
        '–ø–æ–º–µ–Ω—è–π –≤—Å–µ –∏–∫–æ–Ω–∫–∏', '–∑–∞–º–µ–Ω–∏ –≥—Ä—É–ø–ø—É –∏–∫–æ–Ω–æ–∫', 'change all icons',
        'replace group', '–≥—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–º–µ–Ω–∞'
      ],
      info: [
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∫–æ–Ω–∫–µ', '–¥–µ—Ç–∞–ª–∏ –∏–∫–æ–Ω–∫–∏', 'icon info', 'icon details'
      ],
      help: [
        '–ø–æ–º–æ—â—å —Å –∏–∫–æ–Ω–∫–∞–º–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–∫–æ–Ω–∫–∞–º–∏', 'icon help', 'help icons'
      ]
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    let action: IconChatContext['action'] | null = null;
    for (const [key, patternList] of Object.entries(patterns)) {
      if (patternList.some(pattern => lowerMessage.includes(pattern))) {
        action = key as IconChatContext['action'];
        break;
      }
    }

    if (!action) return null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    const categories = {
      'navigation': ['–Ω–∞–≤–∏–≥–∞—Ü–∏—è', 'navigation', 'nav', 'home', 'apps', 'swap', 'history'],
      'sidebar': ['sidebar', '—Å–∞–π–¥–±–∞—Ä', '–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å', 'close', 'add', 'edit', 'settings'],
      'search': ['–ø–æ–∏—Å–∫', 'search', 'magnify', 'recent', 'trending'],
      'actions': ['–¥–µ–π—Å—Ç–≤–∏—è', 'actions', 'send', 'receive', 'buy'],
      'receive': ['receive', '–ø–æ–ª—É—á–∏—Ç—å', 'qr', 'copy', 'sol', 'usdc', 'usdt'],
      'system': ['system', '—Å–∏—Å—Ç–µ–º–∞', 'header', 'swap-settings'],
      'dropdown': ['dropdown', '–≤—ã–ø–∞–¥–∞—é—â–∏–π']
    };

    let category: string | undefined;
    let element_name: string | undefined;

    for (const [cat, keywords] of Object.entries(categories)) {
      if (keywords.some(keyword => lowerMessage.includes(keyword))) {
        category = cat;
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞
        if (lowerMessage.includes('home')) element_name = 'home';
        else if (lowerMessage.includes('send')) element_name = 'send';
        else if (lowerMessage.includes('qr')) element_name = 'qr';
        break;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–º–µ–Ω—ã
    const iconGroups = ['search', 'swap', 'qr', 'copy'];
    let icon_group: string | undefined;
    for (const group of iconGroups) {
      if (lowerMessage.includes(group)) {
        icon_group = group;
        break;
      }
    }

    return {
      action,
      category,
      element_name,
      icon_group
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏–∫–æ–Ω–æ–∫
  async handleListIcons(context: IconChatContext): Promise<string> {
    if (!this.checkIconLibEnabled()) {
      return "‚ùå –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.";
    }

    try {
      const iconsByCategory = await this.iconManager.getIconsByCategory();
      const variants = await this.iconManager.getIconVariants();
      
      let response = "üì± **–î–û–°–¢–£–ü–ù–´–ï –ò–ö–û–ù–ö–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò**\n\n";
      
      if (context.category) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryIcons = iconsByCategory[context.category] || [];
        if (categoryIcons.length > 0) {
          response += `üéØ **${context.category.toUpperCase()}** (${categoryIcons.length} –∏–∫–æ–Ω–æ–∫):\n`;
          categoryIcons.forEach(icon => {
            response += `  ‚Ä¢ **${icon.name}** - \`${icon.storage_file_name}\`\n`;
          });
        } else {
          response += `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${context.category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞\n`;
        }
      } else {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Object.entries(iconsByCategory).forEach(([category, icons]) => {
          if (icons.length > 0) {
            response += `üìÅ **${category.toUpperCase()}** (${icons.length} –∏–∫–æ–Ω–æ–∫)\n`;
            icons.forEach(icon => {
              response += `  ‚Ä¢ **${icon.name}** - \`${icon.storage_file_name}\`\n`;
            });
            response += "\n";
          }
        });
      }
      
      // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–∫–æ–Ω–æ–∫
      if (variants.length > 0) {
        response += "\nüîó **–ì–†–£–ü–ü–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ò–ö–û–ù–û–ö**:\n";
        variants.forEach(variant => {
          response += `  ‚Ä¢ **${variant.group_name}**: ${variant.element_ids.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`;
        });
      }
      
      response += "\nüí° **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏:**\n";
      response += "‚Ä¢ `–ø–æ–º–µ–Ω—è–π –∏–∫–æ–Ω–∫—É home` - –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É\n";
      response += "‚Ä¢ `–ø–æ–∫–∞–∂–∏ –∏–∫–æ–Ω–∫–∏ navigation` - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n";
      response += "‚Ä¢ `–∑–∞–º–µ–Ω–∏ –≥—Ä—É–ø–ø—É search` - –∑–∞–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–∫–æ–Ω–æ–∫\n";
      
      return response;
    } catch (error) {
      console.error('‚ùå Error in handleListIcons:', error);
      return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∫–æ–Ω–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–º–æ—â—å
  handleIconHelp(): string {
    if (!this.checkIconLibEnabled()) {
      return "‚ùå –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.";
    }

    const storageStructure = this.iconManager.getStorageStructure();
    
    let response = "üé® **–ü–û–ú–û–©–¨ –ü–û –†–ê–ë–û–¢–ï –° –ò–ö–û–ù–ö–ê–ú–ò**\n\n";
    
    response += "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n";
    response += "‚Ä¢ `–ø–æ–∫–∞–∂–∏ –∏–∫–æ–Ω–∫–∏` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫\n";
    response += "‚Ä¢ `–ø–æ–∫–∞–∂–∏ –∏–∫–æ–Ω–∫–∏ navigation` - –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n";
    response += "‚Ä¢ `–ø–æ–º–µ–Ω—è–π –∏–∫–æ–Ω–∫—É home` - –∑–∞–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É\n";
    response += "‚Ä¢ `–∑–∞–º–µ–Ω–∏ –≥—Ä—É–ø–ø—É qr` - –∑–∞–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∫–æ–Ω–æ–∫\n";
    response += "‚Ä¢ `–ø–æ–º–æ—â—å —Å –∏–∫–æ–Ω–∫–∞–º–∏` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n";
    
    response += "üìÅ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Storage (wallet-icons):**\n";
    Object.entries(storageStructure).forEach(([folder, files]) => {
      response += `\nüìÇ **${folder}/**\n`;
      files.forEach(file => {
        response += `  ‚îî‚îÄ‚îÄ ${file}\n`;
      });
    });
    
    response += "\nüîó **–ì—Ä—É–ø–ø—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–∫–æ–Ω–æ–∫:**\n";
    response += "‚Ä¢ **search** - –ø–æ–∏—Å–∫ (magnify.svg)\n";
    response += "‚Ä¢ **swap** - –æ–±–º–µ–Ω (swap.svg)\n";
    response += "‚Ä¢ **qr** - QR –∫–æ–¥—ã (qr-main.svg)\n";
    response += "‚Ä¢ **copy** - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (copy.svg)\n\n";
    
    response += "üí° **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**\n";
    response += "1. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–∫–æ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª\n";
    response += "2. –ü—Ä–∏ –∑–∞–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n";
    response += "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `custom-icons/`\n";
    
    return response;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞
  async generateIconResponse(context: IconChatContext, userId?: string): Promise<string> {
    if (!this.checkIconLibEnabled()) {
      return "‚ùå –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.";
    }

    switch (context.action) {
      case 'list':
        return await this.handleListIcons(context);
      
      case 'help':
        return this.handleIconHelp();
      
      case 'replace':
        return "üì§ –î–ª—è –∑–∞–º–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª SVG –∏ —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é –∏–∫–æ–Ω–∫—É –∑–∞–º–µ–Ω–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ–º–µ–Ω—è–π –∏–∫–æ–Ω–∫—É home –Ω–∞ —ç—Ç—É'";
      
      case 'batch_replace':
        return "üì§ –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–º–µ–Ω—ã –∏–∫–æ–Ω–æ–∫ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª SVG –∏ —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–º–µ–Ω–∏ –≥—Ä—É–ø–ø—É search –Ω–∞ —ç—Ç—É –∏–∫–æ–Ω–∫—É'";
      
      case 'info':
        if (context.element_name) {
          return `‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∫–æ–Ω–∫–µ "${context.element_name}"...`;
        }
        return "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏";
      
      default:
        return "‚ùì –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å –ø–æ –∏–∫–æ–Ω–∫–∞–º. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å —Å –∏–∫–æ–Ω–∫–∞–º–∏' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏";
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏
  async handleIconFileUpload(message: string, fileData: string, fileName: string, userId: string): Promise<any> {
    if (!this.checkIconLibEnabled()) {
      return {
        success: false,
        error: 'Icon library functionality is currently disabled',
        code: 'FEATURE_DISABLED'
      };
    }

    try {
      console.log('üìÅ Processing icon file upload:', { fileName, userId, messageLength: message.length });
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã iconManager –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∫–æ–Ω–æ–∫
      
      return {
        success: true,
        data: {
          message: `–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`,
          file_name: fileName,
          user_id: userId
        }
      };
    } catch (error) {
      console.error('‚ùå Error in handleIconFileUpload:', error);
      return {
        success: false,
        error: error.message || 'Failed to process icon file upload'
      };
    }
  }
}
