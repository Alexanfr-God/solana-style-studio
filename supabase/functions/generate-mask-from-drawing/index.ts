
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { drawingImage, safeZone } = await req.json();
    
    console.log(`Received request to generate mask from drawing`);
    
    if (!drawingImage) {
      throw new Error("No drawing image provided");
    }
    
    // 1. First use GPT-4o to analyze the drawing and create a description
    const drawingDescription = await analyzeDrawingWithGPT(drawingImage);
    console.log("Drawing description:", drawingDescription);
    
    // 2. Generate the mask image based on the description using DALL-E with strict transparency rules
    const generatedImageUrl = await generateMaskWithDALLE(drawingDescription);
    console.log("Generated mask URL:", generatedImageUrl);
    
    // 3. Return the generated image and metadata
    const responseData = {
      mask_image_url: generatedImageUrl,
      layout_json: {
        layout: {
          top: drawingDescription.includes("top") ? "Decorative elements on top" : null,
          bottom: drawingDescription.includes("bottom") ? "Decorative elements on bottom" : null,
          left: drawingDescription.includes("left") ? "Decorative elements on left" : null,
          right: drawingDescription.includes("right") ? "Decorative elements on right" : null,
          core: "untouched"
        },
        style: drawingDescription.includes("abstract") ? "abstract" : "character-based",
        color_palette: ["#f4d03f", "#222222", "#ffffff"],
      }
    };

    return new Response(
      JSON.stringify(responseData),
      {
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      },
    );
  } catch (error) {
    console.error("Error:", error);

    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      },
    );
  }
});

/**
 * Analyzes the user's drawing with GPT-4o Vision to create a descriptive prompt
 */
async function analyzeDrawingWithGPT(drawingImageBase64: string): Promise<string> {
  try {
    // Extract the base64 content from data URL if needed
    const base64Content = drawingImageBase64.split(',')[1] || drawingImageBase64;
    
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${openAIApiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `üéØ –ö–û–ù–¢–ï–ö–°–¢ –ê–ù–ê–õ–ò–ó–ê –†–ò–°–£–ù–ö–ê –î–õ–Ø –ú–ê–°–ö–ò –ö–û–®–ï–õ–¨–ö–ê:

–í–´ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫ –Ω–∞ —Ö–æ–ª—Å—Ç–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ.

üìê –ß–¢–û –í–ò–î–ò–¢–ï:
- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ö–æ–ª—Å—Ç 1024x1024 –ø–∏–∫—Å–µ–ª—è
- –í –¶–ï–ù–¢–†–ï: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–µ–º–æ-–∫–æ—à–µ–ª—å–∫–∞ (320x569 –ø–∏–∫—Å–µ–ª–µ–π) - –≠–¢–û –ù–ï –ß–ê–°–¢–¨ –ú–ê–°–ö–ò!
- –í–û–ö–†–£–ì –ö–û–®–ï–õ–¨–ö–ê: –ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏/—Ä–∏—Å—É–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–ó –≠–¢–û–ì–û –î–ï–õ–ê–ï–ú –ú–ê–°–ö–£!

üé® –í–ê–®–ê –ó–ê–î–ê–ß–ê:
–û–ø–∏—à–∏—Ç–µ –¢–û–õ–¨–ö–û –∫—Ä–∞—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–∫—Ä—É–≥ –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–∏.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ - –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º.

üìã –ü–†–ê–í–ò–õ–ê –û–ü–ò–°–ê–ù–ò–Ø:
- –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: "—Å–≤–µ—Ä—Ö—É", "—Å–Ω–∏–∑—É", "—Å–ª–µ–≤–∞", "—Å–ø—Ä–∞–≤–∞"
- –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å: –º—É–ª—å—Ç—è—à–Ω—ã–π, –º–µ–º–Ω—ã–π, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π
- –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–º—ã: —É—à–∏, –ª–∞–ø—ã, —Ä–æ–≥–∞, —É–∑–æ—Ä—ã, —Ä–∞–º–∫–∏
- –ù–ï –£–ü–û–ú–ò–ù–ê–ô–¢–ï –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —Ç–æ–ª—å–∫–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

üéØ –ü–†–ò–ú–ï–† –•–û–†–û–®–ï–ì–û –û–ü–ò–°–ê–ù–ò–Ø:
"–°–≤–µ—Ä—Ö—É –¥–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö —É—Ö–∞ –≤ –º—É–ª—å—Ç—è—à–Ω–æ–º —Å—Ç–∏–ª–µ, —Å–Ω–∏–∑—É –¥–≤–µ –æ–∫—Ä—É–≥–ª—ã–µ –ª–∞–ø—ã, –ø–æ –±–æ–∫–∞–º –≤–æ–ª–Ω–∏—Å—Ç—ã–µ —É–∑–æ—Ä—ã. –°—Ç–∏–ª—å: –∏–≥—Ä–∏–≤—ã–π –º–µ–º–Ω—ã–π –∫–æ—Ç–∏–∫."

–ê–ù–ê–õ–ò–ó–ò–†–£–ô–¢–ï –†–ò–°–£–ù–û–ö –ò –°–û–ó–î–ê–ô–¢–ï –û–ü–ò–°–ê–ù–ò–ï –î–õ–Ø DALL-E:`
          },
          {
            role: "user", 
            content: [
              {
                type: "text", 
                text: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∏—Å—É–Ω–æ–∫. –í —Ü–µ–Ω—Ç—Ä–µ –≤–∏–¥–∏—à—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—à–µ–ª—å–∫–∞ (–ù–ï —Ç—Ä–æ–≥–∞–π –µ–≥–æ!), –∞ –≤–æ–∫—Ä—É–≥ –∫—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏ - —ç—Ç–æ –º–æ—è –º–∞—Å–∫–∞. –û–ø–∏—à–∏ –¢–û–õ–¨–ö–û –∫—Ä–∞—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–∏."
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/png;base64,${base64Content}`
                }
              }
            ]
          }
        ],
        max_tokens: 500
      })
    });

    const data = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      console.error("Unexpected response from OpenAI:", data);
      throw new Error("Failed to analyze drawing");
    }
    
    // Extract the description from GPT's response
    const description = data.choices[0].message.content;
    return description;
  } catch (error) {
    console.error("Error analyzing drawing with GPT:", error);
    throw new Error("Failed to analyze drawing: " + error.message);
  }
}

/**
 * Generates a polished mask image using DALL-E with strict transparency requirements
 */
async function generateMaskWithDALLE(description: string): Promise<string> {
  try {
    // Create a very specific prompt that enforces transparency rules
    const prompt = `üéØ –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–ö–ò –ö–û–®–ï–õ–¨–ö–ê - –°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

üìù –û–ü–ò–°–ê–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${description}"

üìê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
- –†–∞–∑–º–µ—Ä: 1024x1024 –ø–∏–∫—Å–µ–ª—è, PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
- –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ó–†–ê–ß–ù–ê–Ø –ó–û–ù–ê: 320x569 –ø–∏–∫—Å–µ–ª–µ–π (–¢–û–ß–ù–û –ü–û –¶–ï–ù–¢–†–£)
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∑–æ–Ω—ã: X=352, Y=227.5 (–æ—Ç –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞)
- –í –¶–ï–ù–¢–†–ï –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ù–ò–ß–ï–ì–û - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

üé® –ü–†–ê–í–ò–õ–ê –î–ò–ó–ê–ô–ù–ê:
- –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –¢–û–õ–¨–ö–û –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∑–æ–Ω—ã
- –°–≤–µ—Ä—Ö—É: —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–¥ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∑–æ–Ω–æ–π
- –°–Ω–∏–∑—É: —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∑–æ–Ω–æ–π  
- –ü–æ –±–æ–∫–∞–º: —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∑–æ–Ω—ã
- –°—Ç–∏–ª—å: —è—Ä–∫–∏–π, –º–µ–º–Ω—ã–π, –º—É–ª—å—Ç—è—à–Ω—ã–π, –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 320x569px –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º (alpha=0).
–≠—Ç–æ "–æ–∫–Ω–æ" –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º.

üé≠ –î–£–ú–ê–ô–¢–ï –û –ú–ê–°–ö–ï –ö–ê–ö –û:
- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–º–∫–µ –≤–æ–∫—Ä—É–≥ –∫–æ—à–µ–ª—å–∫–∞
- –ö–æ—Å—Ç—é–º–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
- –û–±–ª–æ–∂–∫–µ —Å –≤—ã—Ä–µ–∑–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ

–°–æ–∑–¥–∞–π—Ç–µ PNG —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º –∏ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –≤ —Ü–µ–Ω—Ç—Ä–µ!`;
    
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${openAIApiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: prompt,
        n: 1,
        size: "1024x1024",
        quality: "hd",
        response_format: "url"
      })
    });

    const data = await response.json();
    
    if (!data.data || data.data.length === 0) {
      console.error("Unexpected response from DALL-E:", data);
      throw new Error("Failed to generate image");
    }
    
    return data.data[0].url;
  } catch (error) {
    console.error("Error generating image with DALL-E:", error);
    throw new Error("Failed to generate image: " + error.message);
  }
}
