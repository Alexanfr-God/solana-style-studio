
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.4";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface ConductorRequest {
  imageUrl?: string;
  prompt?: string;
  walletBlueprint?: string;
  targetLayer?: string;
  userId?: string;
  sessionId?: string;
  preferences?: {
    style?: string;
    mood?: string;
    complexity?: string;
    aiPetPersonality?: string;
  };
}

interface ConductorResponse {
  success: boolean;
  sessionId: string;
  analysis?: any;
  styleResult?: any;
  recommendations?: any;
  nextSteps?: string[];
  error?: string;
}

const AI_CONDUCTOR_SYSTEM_PROMPT = `
# AI Conductor –¥–ª—è Wallet Coast Agent v1.0

–¢—ã - –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö crypto wallet —Å—Ç–∏–ª–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

## üéØ –¶–ï–õ–¨ –°–ò–°–¢–ï–ú–´
–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è crypto wallet –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–ø—Ä–æ–º—Ç–∞.

## üß† –ê–ù–ê–õ–ò–ó –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
1. **–ì–ª—É–±–æ–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑**: –¶–≤–µ—Ç–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —ç–º–æ—Ü–∏–∏, —Å—Ç–∏–ª—å, —Ç–µ–∫—Å—Ç—É—Ä—ã
2. **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è**: –ö–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ wallet UI
3. **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç**: –£–¥–æ–±—Å—Ç–≤–æ, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å
4. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è**: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã

## üìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ê–ü–†–û–°–ê:

### –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–ø—Ä–æ–º—Ç)
- –í—ã—è–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å

### –®–∞–≥ 2: –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –í—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
- –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å AI Pet
- –£—á–µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

### –®–∞–≥ 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
- –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

## üé® –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:
- **–í–∏–∑—É–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è**: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: UI –æ—Å—Ç–∞–µ—Ç—Å—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º
- **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å**: –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å**: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

## ü§ñ AI PET –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
- –ü–æ–¥–æ–±—Ä–∞—Ç—å —ç–º–æ—Ü–∏—é AI Pet –ø–æ–¥ –æ–±—â–∏–π —Å—Ç–∏–ª—å
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (inside/outside)
- –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ç–µ–ª–∞ (phantom/lottie)
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å

## üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨:
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
- –£—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
- –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —É–ª—É—á—à–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã

–í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
`;

const ANALYSIS_AGENT_PROMPT = `
# –ê–≥–µ–Ω—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–ø—Ä–æ–º—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ:

## –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –ê–ù–ê–õ–ò–ó–ê:
1. **–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞**: –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ, –∞–∫—Ü–µ–Ω—Ç–Ω—ã–µ, —Ñ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ —Å HEX –∫–æ–¥–∞–º–∏
2. **–ö–æ–º–ø–æ–∑–∏—Ü–∏—è**: –ë–∞–ª–∞–Ω—Å, —Ä–∏—Ç–º, —Ñ–æ–∫—É—Å–Ω—ã–µ —Ç–æ—á–∫–∏, –≥–ª—É–±–∏–Ω–∞
3. **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω**: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
4. **–°—Ç–∏–ª–∏—Å—Ç–∏–∫–∞**: –ú–∏–Ω–∏–º–∞–ª–∏–∑–º/–º–∞–∫—Å–∏–º–∞–ª–∏–∑–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
5. **–¢–µ–∫—Å—Ç—É—Ä—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã**: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —É–∑–æ—Ä—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã
6. **–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ–¥ —Å—Ç–∏–ª—å
7. **AI Pet —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —ç–º–æ—Ü–∏—è, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ, —Ç–∏–ø

## WALLET-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ö–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫, —Ñ–æ–Ω–æ–≤, —Ç–µ–∫—Å—Ç–∞
- –ö–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
- –ì–¥–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è—Ö

–í–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
`;

const STYLE_GENERATION_PROMPT = `
# –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π

–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π WalletStyleSet:

## –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –°–¢–ò–õ–ò–ó–ê–¶–ò–ò:
1. **–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏**: –§–æ–Ω, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞, –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
2. **–°–ª–æ–∏**: Login, Home, Swap, Apps, History, Search
3. **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã**: –ö–Ω–æ–ø–∫–∏, –∏–Ω–ø—É—Ç—ã, –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—è
4. **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: –•–æ–≤–µ—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥—ã, –∞–Ω–∏–º–∞—Ü–∏–∏
5. **AI Pet**: –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ —Å—Ç–∏–ª—å

## –ü–†–ò–ù–¶–ò–ü–´ –°–¢–ò–õ–ò–ó–ê–¶–ò–ò:
- **–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å**: –ï–¥–∏–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫
- **–ò–µ—Ä–∞—Ä—Ö–∏—è**: –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å**: –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
- **–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å**: –†–∞–±–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
- **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏

## –û–°–û–ë–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –£—á–µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
- –°–æ–∑–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Ç–æ–∫–µ–Ω–æ–≤

–ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç WalletComponentStyles —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
`;

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const requestData: ConductorRequest = await req.json();
    console.log("üé≠ AI Conductor started with request:", requestData);

    // –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
    const supabaseKey = Deno.env.get("SUPABASE_ANON_KEY") || "";
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const openAiApiKey = Deno.env.get("OPENAI_API_KEY") || "";
    if (!openAiApiKey) {
      throw new Error("OpenAI API key not found");
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sessionId –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    const sessionId = requestData.sessionId || crypto.randomUUID();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏
    const { data: session, error: sessionError } = await supabase
      .from("ai_requests")
      .insert({
        user_id: requestData.userId || 'anonymous',
        prompt: requestData.prompt || 'Image analysis request',
        status: 'processing',
        session_id: sessionId,
        metadata: {
          walletBlueprint: requestData.walletBlueprint,
          targetLayer: requestData.targetLayer,
          preferences: requestData.preferences
        }
      })
      .select()
      .single();

    if (sessionError) {
      console.error("Error creating session:", sessionError);
    }

    console.log("üéØ Session created:", sessionId);

    // –§–∞–∑–∞ 1: –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const strategicPlan = await createStrategicPlan(requestData, openAiApiKey);
    console.log("üìã Strategic plan created:", strategicPlan);

    // –§–∞–∑–∞ 2: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    let analysisResult = null;
    if (requestData.imageUrl) {
      console.log("üîç Starting image analysis...");
      const { data: imageAnalysis, error: analysisError } = await supabase.functions.invoke(
        'analyze-wallet-image',
        { body: { imageUrl: requestData.imageUrl } }
      );
      
      if (analysisError) {
        console.error("Image analysis error:", analysisError);
      } else {
        analysisResult = imageAnalysis;
        console.log("‚úÖ Image analysis completed");
      }
    }

    // –§–∞–∑–∞ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è
    console.log("üé® Starting style generation...");
    const { data: styleResult, error: styleError } = await supabase.functions.invoke(
      'generate-style',
      {
        body: {
          prompt: requestData.prompt || "Modern crypto wallet style",
          image_url: requestData.imageUrl,
          layer_type: requestData.targetLayer || 'global',
          user_id: requestData.userId || 'anonymous'
        }
      }
    );

    if (styleError) {
      console.error("Style generation error:", styleError);
    } else {
      console.log("‚úÖ Style generation completed");
    }

    // –§–∞–∑–∞ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const recommendations = await generateRecommendations(
      strategicPlan,
      analysisResult,
      styleResult,
      requestData.preferences,
      openAiApiKey
    );

    // –§–∞–∑–∞ 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    const nextSteps = determineNextSteps(strategicPlan, analysisResult, styleResult);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await supabase
      .from("ai_requests")
      .update({
        status: 'completed',
        style_result: styleResult?.style || null,
        metadata: {
          ...session?.metadata,
          strategicPlan,
          analysisResult,
          recommendations,
          nextSteps
        }
      })
      .eq('session_id', sessionId);

    const response: ConductorResponse = {
      success: true,
      sessionId,
      analysis: analysisResult,
      styleResult: styleResult?.style,
      recommendations,
      nextSteps,
    };

    console.log("üéâ AI Conductor completed successfully");

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("‚ùå Error in AI Conductor:", error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});

async function createStrategicPlan(request: ConductorRequest, apiKey: string) {
  const planningPrompt = `
${AI_CONDUCTOR_SYSTEM_PROMPT}

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${request.imageUrl ? '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- –ü—Ä–æ–º—Ç: "${request.prompt || '–ù–µ —É–∫–∞–∑–∞–Ω'}"
- –¶–µ–ª–µ–≤–æ–π —Å–ª–æ–π: ${request.targetLayer || 'global'}
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(request.preferences || {})}

–°–û–ó–î–ê–ô –î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "approach": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞",
  "priority": "–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π",
  "complexity": "–ø—Ä–æ—Å—Ç–æ–π/—Å—Ä–µ–¥–Ω–∏–π/—Å–ª–æ–∂–Ω—ã–π",
  "estimatedSteps": —á–∏—Å–ª–æ_—à–∞–≥–æ–≤,
  "focusAreas": ["–æ–±–ª–∞—Å—Ç—å1", "–æ–±–ª–∞—Å—Ç—å2"],
  "aiPetStrategy": {
    "emotion": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_—ç–º–æ—Ü–∏—è",
    "placement": "inside/outside",
    "bodyType": "phantom/lottie",
    "personality": "–æ–ø–∏—Å–∞–Ω–∏–µ_–ª–∏—á–Ω–æ—Å—Ç–∏"
  },
  "technicalConsiderations": ["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ1", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ2"],
  "expectedOutcome": "–æ–ø–∏—Å–∞–Ω–∏–µ_–æ–∂–∏–¥–∞–µ–º–æ–≥–æ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
}
`;

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${apiKey}`,
    },
    body: JSON.stringify({
      model: "gpt-4o",
      messages: [{ role: "user", content: planningPrompt }],
      max_tokens: 1000,
      temperature: 0.7
    }),
  });

  const data = await response.json();
  let planContent = data.choices[0].message.content;
  
  // –û—á–∏—â–∞–µ–º –æ—Ç markdown –∏ –ø–∞—Ä—Å–∏–º JSON
  planContent = planContent.replace(/```json|```/g, "").trim();
  
  try {
    return JSON.parse(planContent);
  } catch (e) {
    console.error("Error parsing strategic plan:", e);
    return {
      approach: "fallback",
      priority: "medium",
      complexity: "medium",
      estimatedSteps: 3,
      focusAreas: ["colors", "typography"],
      aiPetStrategy: {
        emotion: "idle",
        placement: "inside",
        bodyType: "phantom",
        personality: "friendly"
      },
      technicalConsiderations: ["responsive design"],
      expectedOutcome: "Modern wallet style"
    };
  }
}

async function generateRecommendations(
  strategicPlan: any,
  analysisResult: any,
  styleResult: any,
  preferences: any,
  apiKey: string
) {
  const recommendationsPrompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù: ${JSON.stringify(strategicPlan)}
–ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: ${JSON.stringify(analysisResult?.analysis || {})}
–†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–ò–õ–Ø: ${JSON.stringify(styleResult || {})}
–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ${JSON.stringify(preferences || {})}

–°–æ–∑–¥–∞–π JSON —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏:
{
  "styleImprovements": ["—É–ª—É—á—à–µ–Ω–∏–µ1", "—É–ª—É—á—à–µ–Ω–∏–µ2"],
  "aiPetCustomization": {
    "recommendedEmotion": "—ç–º–æ—Ü–∏—è",
    "customAnimations": ["–∞–Ω–∏–º–∞—Ü–∏—è1", "–∞–Ω–∏–º–∞—Ü–∏—è2"],
    "interactionTriggers": ["—Ç—Ä–∏–≥–≥–µ—Ä1", "—Ç—Ä–∏–≥–≥–µ—Ä2"]
  },
  "userExperienceEnhancements": ["—É–ª—É—á—à–µ–Ω–∏–µ1", "—É–ª—É—á—à–µ–Ω–∏–µ2"],
  "accessibilityNotes": ["–∑–∞–º–µ—Ç–∫–∞1", "–∑–∞–º–µ—Ç–∫–∞2"],
  "performanceOptimizations": ["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è1", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è2"],
  "futureIterations": ["–∏–¥–µ—è1", "–∏–¥–µ—è2"]
}
`;

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [{ role: "user", content: recommendationsPrompt }],
        max_tokens: 800,
        temperature: 0.8
      }),
    });

    const data = await response.json();
    let content = data.choices[0].message.content.replace(/```json|```/g, "").trim();
    return JSON.parse(content);
  } catch (e) {
    console.error("Error generating recommendations:", e);
    return {
      styleImprovements: ["Consider adding more contrast", "Enhance color harmony"],
      aiPetCustomization: {
        recommendedEmotion: "happy",
        customAnimations: ["subtle bounce", "color pulse"],
        interactionTriggers: ["wallet unlock", "transaction complete"]
      },
      userExperienceEnhancements: ["Improve button feedback", "Add micro-interactions"],
      accessibilityNotes: ["Ensure sufficient color contrast", "Add focus indicators"],
      performanceOptimizations: ["Optimize animation performance", "Reduce bundle size"],
      futureIterations: ["Dark/light theme toggle", "Seasonal style variations"]
    };
  }
}

function determineNextSteps(strategicPlan: any, analysisResult: any, styleResult: any): string[] {
  const steps = ["üé® Style generation completed"];
  
  if (analysisResult?.success) {
    steps.push("üîç Image analysis successful");
  }
  
  if (styleResult?.success) {
    steps.push("‚ú® Wallet style applied");
  }
  
  steps.push(
    "ü§ñ AI Pet configuration ready",
    "üì± Preview available in wallet",
    "üíæ Style saved to library",
    "üìä Ready for user feedback"
  );
  
  return steps;
}
