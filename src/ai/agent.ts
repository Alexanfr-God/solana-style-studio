
// AI –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { tools, setAllLayersPrimaryButtons, setAllLayersTextColor, setAllLayersBackground, setAllFonts } from './tools';
import { LAYER_ALIASES, UILayer } from './routes';
import { useThemeStore } from '@/state/themeStore';
import { captureWalletPreview } from './capture';
import { extractPaletteLocal } from './palette';

function resolveLayer(text: string): UILayer {
  const lower = text.toLowerCase();
  for (const [key, layer] of Object.entries(LAYER_ALIASES)) {
    if (lower.includes(key)) return layer;
  }
  // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî wallet –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
  return 'wallet';
}

function isValidImageUrl(url: string): boolean {
  try {
    const parsed = new URL(url);
    return parsed.protocol === 'https:' && 
           /\.(png|jpg|jpeg|webp|gif)$/i.test(parsed.pathname);
  } catch {
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤—Å–µ —Å–ª–æ–∏)
function isGlobalCommand(text: string): boolean {
  const lower = text.toLowerCase();
  // EN –º–∞—Ä–∫–µ—Ä—ã
  const enMarkers = ['all', 'every', 'entire', 'whole wallet', 'global', 'everything'];
  // RU –º–∞—Ä–∫–µ—Ä—ã  
  const ruMarkers = ['–≤—Å–µ', '–≤–µ—Å—å', '–≤–µ—Å—å –∫–æ—à–µ–ª—ë–∫', '–≥–ª–æ–±–∞–ª—å–Ω–æ', '–≤—Å—ë'];
  
  return [...enMarkers, ...ruMarkers].some(marker => lower.includes(marker));
}

// Help command detection
function isHelpCommand(text: string): boolean {
  const lower = text.toLowerCase();
  const helpMarkers = ['help', 'what can you do', '–ø–æ–º–æ—â—å', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', 'commands', '–∫–æ–º–∞–Ω–¥—ã'];
  return helpMarkers.some(marker => lower.includes(marker));
}

// Palette extraction command detection
function isPaletteCommand(text: string): boolean {
  const lower = text.toLowerCase();
  const enMarkers = ['match colors', 'extract palette', 'current preview', 'analyze colors', 'colors from preview'];
  const ruMarkers = ['–ø–æ–¥–±–µ—Ä–∏ —Ü–≤–µ—Ç–∞', '–ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É', '–∏–∑ –ø—Ä–µ–≤—å—é', '–∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤', '—Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–≤—å—é', '–ø–∞–ª–∏—Ç—Ä–∞ –ø—Ä–µ–≤—å—é'];
  
  return [...enMarkers, ...ruMarkers].some(marker => lower.includes(marker));
}

// Simple localization function
function getLocalizedMessage(key: string, lang: 'en' | 'ru' = 'en', params?: Record<string, string>): string {
  const messages = {
    en: {
      backgroundUpdated: `Updated ${params?.layer} layer background${params?.type === 'image' ? ' (image)' : ` to ${params?.color}`}`,
      backgroundNotFound: `Couldn't find suitable background in ${params?.layer} layer. Be more specific (e.g., "home background", "lock background").`,
      buttonUpdated: `Made ${params?.layer} layer button ‚Üí ${params?.color}`,
      buttonNotFound: `Couldn't find suitable button in ${params?.layer} layer. Be more specific (e.g., "swap button", "send button").`,
      textUpdated: `Text on ${params?.layer} layer is now ${params?.color}`,
      textNotFound: `Couldn't find suitable text in ${params?.layer} layer. Be more specific (e.g., "home text", "header text").`,
      fontUpdated: `Interface font: ${params?.font}`,
      // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      allButtonsUpdated: `All wallet buttons are now ${params?.color}`,
      allTextUpdated: `All wallet text is now ${params?.color}`,
      allBackgroundsUpdated: `All wallet backgrounds are now ${params?.color}`,
      allFontsUpdated: `All wallet fonts changed to ${params?.font}`,
      darkThemeApplied: `Dark theme applied: backgrounds ${params?.bg}, text ${params?.text}`,
      // Palette extraction
      paletteExtracted: `üé® Colors extracted from preview: background ${params?.bg}, text ${params?.text}, buttons ${params?.primary}`,
      paletteExtractionFailed: `‚ùå Failed to extract colors from preview: ${params?.error}`,
      paletteProcessing: `üñºÔ∏è Analyzing current wallet preview...`,
      helpMessage: `üé® **AI Theme Commands**

**Colors & Styling:**
‚Ä¢ "Make all buttons #FF5C00" - change all button colors
‚Ä¢ "Change all text to white" - change all text colors  
‚Ä¢ "Dark theme for the whole wallet: background #0B0D12, text #FFFFFF" - apply dark theme
‚Ä¢ "swap button orange" - change specific layer button
‚Ä¢ "home background #1A1A1A" - change layer background
‚Ä¢ "lock text #FFFFFF" - change layer text color

**Vision & Palette:**
‚Ä¢ "Match colors to current preview" - extract and apply colors from wallet screenshot
‚Ä¢ "Analyze colors from preview" - extract palette from current design

**Typography:**
‚Ä¢ "Font: Sora" - change global font family
‚Ä¢ "All fonts: Inter" - apply font everywhere

**Layers available:** home, lock, swap, send, receive, buy, search, dropdown

**Examples:** Try "Make all buttons #FF5C00" or "Match colors to current preview"`
    },
    ru: {
      backgroundUpdated: `–û–±–Ω–æ–≤–∏–ª —Ñ–æ–Ω —Å–ª–æ—è ${params?.layer}${params?.type === 'image' ? ' (–∫–∞—Ä—Ç–∏–Ω–∫–∞)' : ` –Ω–∞ ${params?.color}`}`,
      backgroundNotFound: `–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ñ–æ–Ω–∞ –≤ —Å–ª–æ–µ ${params?.layer}. –°–∫–∞–∂–∏ —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ñ–æ–Ω home", "—Ñ–æ–Ω lock").`,
      buttonUpdated: `–°–¥–µ–ª–∞–ª –∫–Ω–æ–ø–∫—É —Å–ª–æ—è ${params?.layer} ‚Üí ${params?.color}`,
      buttonNotFound: `–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –≤ —Å–ª–æ–µ ${params?.layer}. –°–∫–∞–∂–∏ —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∫–Ω–æ–ø–∫–∞ swap", "–∫–Ω–æ–ø–∫–∞ send").`,
      textUpdated: `–¢–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–µ ${params?.layer} —Ç–µ–ø–µ—Ä—å ${params?.color}`,
      textNotFound: `–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–µ ${params?.layer}. –°–∫–∞–∂–∏ —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–µ–∫—Å—Ç home", "—Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞").`,
      fontUpdated: `–®—Ä–∏—Ñ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${params?.font}`,
      // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      allButtonsUpdated: `–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ —Ç–µ–ø–µ—Ä—å ${params?.color}`,
      allTextUpdated: `–í–µ—Å—å —Ç–µ–∫—Å—Ç –∫–æ—à–µ–ª—å–∫–∞ —Ç–µ–ø–µ—Ä—å ${params?.color}`,
      allBackgroundsUpdated: `–í—Å–µ —Ñ–æ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞ —Ç–µ–ø–µ—Ä—å ${params?.color}`,
      allFontsUpdated: `–í—Å–µ —à—Ä–∏—Ñ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ ${params?.font}`,
      darkThemeApplied: `–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: —Ñ–æ–Ω—ã ${params?.bg}, —Ç–µ–∫—Å—Ç ${params?.text}`,
      // Palette extraction
      paletteExtracted: `üé® –¶–≤–µ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –ø—Ä–µ–≤—å—é: —Ñ–æ–Ω ${params?.bg}, —Ç–µ–∫—Å—Ç ${params?.text}, –∫–Ω–æ–ø–∫–∏ ${params?.primary}`,
      paletteExtractionFailed: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–≤—å—é: ${params?.error}`,
      paletteProcessing: `üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–π –≤–∏–¥ –∫–æ—à–µ–ª—å–∫–∞...`,
      helpMessage: `üé® **–ö–æ–º–∞–Ω–¥—ã AI —Ç–µ–º–∏–∑–∞—Ü–∏–∏**

**–¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª—å:**
‚Ä¢ "–°–¥–µ–ª–∞–π –≤—Å–µ –∫–Ω–æ–ø–∫–∏ #FF5C00" - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ "–í–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–ª—ã–º" - –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
‚Ä¢ "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞: —Ñ–æ–Ω #0B0D12, —Ç–µ–∫—Å—Ç #FFFFFF" - –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É
‚Ä¢ "–∫–Ω–æ–ø–∫–∞ swap –æ—Ä–∞–Ω–∂–µ–≤–∞—è" - –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–ª–æ—è
‚Ä¢ "—Ñ–æ–Ω home #1A1A1A" - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω —Å–ª–æ—è
‚Ä¢ "—Ç–µ–∫—Å—Ç lock #FFFFFF" - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ª–æ—è

**–í–∏–¥–µ–Ω–∏–µ –∏ –ø–∞–ª–∏—Ç—Ä–∞:**
‚Ä¢ "–ü–æ–¥–±–µ—Ä–∏ —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–≤—å—é" - –∏–∑–≤–ª–µ—á—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
‚Ä¢ "–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –ø—Ä–µ–≤—å—é" - –∏–∑–≤–ª–µ—á—å –ø–∞–ª–∏—Ç—Ä—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞

**–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞:**
‚Ä¢ "–®—Ä–∏—Ñ—Ç: Sora" - –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
‚Ä¢ "–í—Å–µ —à—Ä–∏—Ñ—Ç—ã: Inter" - –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç –≤–µ–∑–¥–µ

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–∏:** home, lock, swap, send, receive, buy, search, dropdown

**–ü—Ä–∏–º–µ—Ä—ã:** –ü–æ–ø—Ä–æ–±—É–π "–°–¥–µ–ª–∞–π –≤—Å–µ –∫–Ω–æ–ø–∫–∏ #FF5C00" –∏–ª–∏ "–ü–æ–¥–±–µ—Ä–∏ —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–≤—å—é"`
    }
  };

  return messages[lang][key] || messages.en[key] || key;
}

export async function handleUserMessage(input: string, lang: 'en' | 'ru' = 'en'): Promise<{message: string, patch: any[]}> {
  const theme = useThemeStore.getState().theme;
  const text = input.trim();
  const lower = text.toLowerCase();

  // Help command - highest priority
  if (isHelpCommand(lower)) {
    return { 
      message: getLocalizedMessage('helpMessage', lang), 
      patch: [] 
    };
  }

  // Palette extraction command - high priority
  if (isPaletteCommand(lower)) {
    try {
      console.log('üé® [AI] Processing palette extraction command');
      
      // Capture wallet preview
      const blob = await captureWalletPreview();
      
      // Extract palette locally
      const palette = await extractPaletteLocal(blob);
      
      // Create mass operations
      const bgPatch = setAllLayersBackground(palette.bg, theme);
      const textPatch = setAllLayersTextColor(palette.text, theme);  
      const buttonPatch = setAllLayersPrimaryButtons(palette.primary, theme);
      
      const patch = [...bgPatch, ...textPatch, ...buttonPatch];
      
      console.log(`üîß [STORE] AI palette patch ops: ${patch.length}`);
      
      if (patch.length === 0) {
        return {
          message: getLocalizedMessage('paletteExtractionFailed', lang, { error: 'No suitable elements found' }),
          patch: []
        };
      }
      
      return {
        message: getLocalizedMessage('paletteExtracted', lang, { 
          bg: palette.bg, 
          text: palette.text, 
          primary: palette.primary 
        }),
        patch
      };
      
    } catch (error) {
      console.error('‚ùå [AI] Palette extraction error:', error);
      return {
        message: getLocalizedMessage('paletteExtractionFailed', lang, { error: error.message }),
        patch: []
      };
    }
  }

  const hex = lower.match(/#([0-9a-f]{6})\b/i)?.[0] || null;
  const urlMatch = lower.match(/https?:\/\/\S+\.(png|jpg|jpeg|webp|gif)/i)?.[0];
  const url = urlMatch && isValidImageUrl(urlMatch) ? urlMatch : null;

  const isGlobal = isGlobalCommand(lower);
  const layer = resolveLayer(lower);

  // –ú–∞—Å—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  if (isGlobal) {
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (dark theme)
    if ((/dark theme|—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞/.test(lower)) && hex) {
      const bgHex = hex;
      const textHex = lower.match(/#([0-9a-f]{6})\b/ig)?.[1] ? `#${lower.match(/#([0-9a-f]{6})\b/ig)?.[1]}` : '#FFFFFF';
      
      const bgPatch = setAllLayersBackground(bgHex, theme);
      const textPatch = setAllLayersTextColor(textHex, theme);
      const patch = [...bgPatch, ...textPatch];
      
      console.log(`üîß [STORE] AI dark theme patch ops: ${patch.length}`);
      
      if (!patch.length) {
        return { message: 'Could not apply dark theme - no suitable elements found', patch: [] };
      }
      
      return { 
        message: getLocalizedMessage('darkThemeApplied', lang, { bg: bgHex, text: textHex }), 
        patch 
      };
    }

    // –í—Å–µ –∫–Ω–æ–ø–∫–∏
    if ((/button|–∫–Ω–æ–ø–∫/.test(lower)) && hex) {
      const patch = setAllLayersPrimaryButtons(hex, theme);
      
      console.log(`üîß [STORE] AI all buttons patch ops: ${patch.length}`);
      
      if (!patch.length) {
        return { message: 'No buttons found to update', patch: [] };
      }
      
      return { 
        message: getLocalizedMessage('allButtonsUpdated', lang, { color: hex }), 
        patch 
      };
    }

    // –í–µ—Å—å —Ç–µ–∫—Å—Ç
    if ((/text|—Ç–µ–∫—Å—Ç/.test(lower)) && hex) {
      const patch = setAllLayersTextColor(hex, theme);
      
      console.log(`üîß [STORE] AI all text patch ops: ${patch.length}`);
      
      if (!patch.length) {
        return { message: 'No text elements found to update', patch: [] };
      }
      
      return { 
        message: getLocalizedMessage('allTextUpdated', lang, { color: hex }), 
        patch 
      };
    }

    // –í—Å–µ —Ñ–æ–Ω—ã
    if ((/background|—Ñ–æ–Ω/.test(lower)) && hex) {
      const patch = setAllLayersBackground(hex, theme);
      
      console.log(`üîß [STORE] AI all backgrounds patch ops: ${patch.length}`);
      
      if (!patch.length) {
        return { message: 'No background elements found to update', patch: [] };
      }
      
      return { 
        message: getLocalizedMessage('allBackgroundsUpdated', lang, { color: hex }), 
        patch 
      };
    }
  }

  // –û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
  if ((/—Ñ–æ–Ω|background/.test(lower)) && (hex || url)) {
    const patch = url
      ? tools.setBackgroundImage(layer, url, theme)
      : tools.setBackgroundColor(layer, hex!, theme);
    
    if (!patch.length) {
      return { 
        message: getLocalizedMessage('backgroundNotFound', lang, { layer }), 
        patch: [] 
      };
    }
    
    return { 
      message: getLocalizedMessage('backgroundUpdated', lang, { 
        layer, 
        type: url ? 'image' : 'color',
        color: hex || undefined
      }), 
      patch 
    };
  }

  if ((/button|–∫–Ω–æ–ø–∫/.test(lower)) && hex) {
    const patch = tools.setPrimaryButtonBg(layer, hex, theme);
    
    if (!patch.length) {
      return { 
        message: getLocalizedMessage('buttonNotFound', lang, { layer }), 
        patch: [] 
      };
    }
    
    return { 
      message: getLocalizedMessage('buttonUpdated', lang, { layer, color: hex }), 
      patch 
    };
  }

  if ((/—Ç–µ–∫—Å—Ç|text/.test(lower)) && hex) {
    const patch = tools.setTextColor(layer, hex, theme);
    
    if (!patch.length) {
      return { 
        message: getLocalizedMessage('textNotFound', lang, { layer }), 
        patch: [] 
      };
    }
    
    return { 
      message: getLocalizedMessage('textUpdated', lang, { layer, color: hex }), 
      patch 
    };
  }

  const font = lower.match(/\b(font|—à—Ä–∏—Ñ—Ç)\s*:?\s*([a-z0-9 \-]+)\b/i)?.[2] || null;
  if (font) {
    const patch = isGlobal ? setAllFonts(font, theme) : tools.setFontFamily(font);
    return { 
      message: isGlobal 
        ? getLocalizedMessage('allFontsUpdated', lang, { font })
        : getLocalizedMessage('fontUpdated', lang, { font }), 
      patch 
    };
  }

  // –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥
  return { 
    message: getLocalizedMessage('helpMessage', lang), 
    patch: [] 
  };
}
