
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Sparkles, Upload, Save, Eye } from 'lucide-react';
import { useWalletCustomizationStore } from '@/stores/walletCustomizationStore';
import { 
  analyzeWalletImage, 
  applyWalletStyles,
  saveWalletStyleToLibrary,
  type WalletComponentStyles,
  type DetailedImageAnalysis 
} from '@/services/walletImageAnalysisService';
import { toast } from 'sonner';

interface WalletImageAnalyzerProps {
  uploadedImage: string | null;
  onStylesGenerated?: (styles: WalletComponentStyles, analysis: DetailedImageAnalysis) => void;
}

const WalletImageAnalyzer: React.FC<WalletImageAnalyzerProps> = ({ 
  uploadedImage, 
  onStylesGenerated 
}) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [lastAnalysis, setLastAnalysis] = useState<DetailedImageAnalysis | null>(null);
  const [lastStyles, setLastStyles] = useState<WalletComponentStyles | null>(null);
  const [showDetailedAnalysis, setShowDetailedAnalysis] = useState(false);
  
  const { 
    setWalletStyle, 
    setAiPetZone, 
    setAiPetEmotion,
    setAiPetBodyType,
    triggerAiPetInteraction 
  } = useWalletCustomizationStore();

  const handleAnalyzeAndApply = async () => {
    if (!uploadedImage) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setIsAnalyzing(true);
    try {
      toast.info('üîç –ù–∞—á–∏–Ω–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      
      const result = await analyzeWalletImage(uploadedImage);
      
      if (!result.success) {
        throw new Error(result.error || '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è');
      }

      const { analysis, walletStyles } = result;
      setLastAnalysis(analysis);
      setLastStyles(walletStyles);
      
      // Apply AI Pet recommendations
      if (analysis.aiPetCharacteristics) {
        setAiPetZone(analysis.aiPetCharacteristics.recommendedZone);
        setAiPetEmotion(analysis.aiPetCharacteristics.recommendedEmotion as any);
        setAiPetBodyType(analysis.aiPetCharacteristics.recommendedBodyType);
        triggerAiPetInteraction();
      }
      
      // Apply global wallet styles
      setWalletStyle({
        backgroundColor: analysis.colors.background,
        primaryColor: analysis.colors.primary,
        font: analysis.typography.primary,
        image: uploadedImage
      });
      
      toast.success(`üé® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ç–∏–ª—å "${analysis.style}" –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º`);
      
      // Notify parent component
      if (onStylesGenerated) {
        onStylesGenerated(walletStyles, analysis);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleSaveToLibrary = async () => {
    if (!lastStyles || !lastAnalysis || !uploadedImage) {
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    try {
      const styleName = `${lastAnalysis.style} - ${lastAnalysis.mood}`;
      await saveWalletStyleToLibrary(styleName, lastStyles, lastAnalysis, uploadedImage);
      toast.success('üéâ –°—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è');
    }
  };

  const renderColorPalette = (colors: DetailedImageAnalysis['colors']) => (
    <div className="flex items-center space-x-1">
      <span className="text-purple-400 text-xs">–ü–∞–ª–∏—Ç—Ä–∞:</span>
      {Object.entries(colors).slice(0, 5).map(([key, color], index) => (
        <div 
          key={index}
          className="w-4 h-4 rounded-full border border-white/20 relative group"
          style={{ backgroundColor: color }}
          title={`${key}: ${color}`}
        />
      ))}
    </div>
  );

  return (
    <div className="space-y-4">
      <div className="bg-gradient-to-r from-blue-600/20 to-purple-600/20 border border-blue-500/30 rounded-lg p-4">
        <div className="flex items-center space-x-2 mb-3">
          <Sparkles className="w-5 h-5 text-blue-400" />
          <h3 className="text-lg font-medium text-white">Wallet Image Analyzer</h3>
        </div>
        
        <p className="text-gray-300 text-sm mb-4">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∫–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∫–æ—à–µ–ª—å–∫–∞
        </p>

        {!uploadedImage ? (
          <div className="flex items-center justify-center p-6 border-2 border-dashed border-gray-600 rounded-lg">
            <div className="text-center">
              <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-400 text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ</p>
            </div>
          </div>
        ) : (
          <div className="space-y-3">
            <img 
              src={uploadedImage} 
              alt="Uploaded for analysis" 
              className="w-full h-32 object-cover rounded-lg"
            />
            
            <Button 
              onClick={handleAnalyzeAndApply}
              disabled={isAnalyzing}
              className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
            >
              {isAnalyzing ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω–æ...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                </>
              )}
            </Button>

            {lastStyles && lastAnalysis && (
              <div className="flex space-x-2">
                <Button 
                  onClick={handleSaveToLibrary}
                  variant="outline"
                  className="flex-1 border-green-500/50 text-green-300 hover:bg-green-500/10"
                >
                  <Save className="w-4 h-4 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                
                <Button 
                  onClick={() => setShowDetailedAnalysis(!showDetailedAnalysis)}
                  variant="outline"
                  className="flex-1 border-blue-500/50 text-blue-300 hover:bg-blue-500/10"
                >
                  <Eye className="w-4 h-4 mr-2" />
                  {showDetailedAnalysis ? '–°–∫—Ä—ã—Ç—å' : '–î–µ—Ç–∞–ª–∏'}
                </Button>
              </div>
            )}
          </div>
        )}

        {lastAnalysis && (
          <div className="mt-4 p-3 bg-black/20 rounded-lg">
            <h4 className="text-sm font-medium text-white mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</h4>
            <div className="text-xs text-gray-300 space-y-1">
              <p><span className="text-purple-400">–°—Ç–∏–ª—å:</span> {lastAnalysis.style}</p>
              <p><span className="text-purple-400">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span> {lastAnalysis.mood}</p>
              <p><span className="text-purple-400">–®—Ä–∏—Ñ—Ç:</span> {lastAnalysis.typography.primary}</p>
              <p><span className="text-purple-400">–û—Å–≤–µ—â–µ–Ω–∏–µ:</span> {lastAnalysis.lighting}</p>
              <p><span className="text-purple-400">–ö–æ–Ω—Ç—Ä–∞—Å—Ç:</span> {lastAnalysis.contrast}</p>
              {renderColorPalette(lastAnalysis.colors)}
              
              <div className="mt-2 pt-2 border-t border-gray-600">
                <p><span className="text-blue-400">AI Pet –∑–æ–Ω–∞:</span> {lastAnalysis.aiPetCharacteristics.recommendedZone}</p>
                <p><span className="text-blue-400">AI Pet —Ç–∏–ø:</span> {lastAnalysis.aiPetCharacteristics.recommendedBodyType}</p>
                <p><span className="text-blue-400">AI Pet —ç–º–æ—Ü–∏—è:</span> {lastAnalysis.aiPetCharacteristics.recommendedEmotion}</p>
              </div>
            </div>
          </div>
        )}

        {showDetailedAnalysis && lastAnalysis && (
          <div className="mt-4 p-3 bg-black/30 rounded-lg">
            <h4 className="text-sm font-medium text-white mb-3">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</h4>
            <div className="text-xs text-gray-300 space-y-2">
              
              <div>
                <span className="text-yellow-400">–î–∏–∑–∞–π–Ω —ç–ª–µ–º–µ–Ω—Ç—ã:</span>
                <ul className="ml-2 space-y-1">
                  <li>‚Ä¢ –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã: {lastAnalysis.designElements.hasGradients ? '‚úÖ' : '‚ùå'}</li>
                  <li>‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {lastAnalysis.designElements.hasPatterns ? '‚úÖ' : '‚ùå'}</li>
                  <li>‚Ä¢ –¢–µ–∫—Å—Ç—É—Ä—ã: {lastAnalysis.designElements.hasTextures ? '‚úÖ' : '‚ùå'}</li>
                  <li>‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—è: {lastAnalysis.designElements.hasGeometry ? '‚úÖ' : '‚ùå'}</li>
                  <li>‚Ä¢ –¢–µ–Ω–∏: {lastAnalysis.designElements.hasShadows ? '‚úÖ' : '‚ùå'}</li>
                </ul>
              </div>

              <div>
                <span className="text-green-400">–ö–æ–º–ø–æ–∑–∏—Ü–∏—è:</span>
                <ul className="ml-2 space-y-1">
                  <li>‚Ä¢ –ë–∞–ª–∞–Ω—Å: {lastAnalysis.composition.balance}</li>
                  <li>‚Ä¢ –§–æ–∫—É—Å: {lastAnalysis.composition.focusArea}</li>
                  <li>‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {lastAnalysis.composition.complexity}</li>
                </ul>
              </div>

              {lastAnalysis.textures.length > 0 && (
                <div>
                  <span className="text-orange-400">–¢–µ–∫—Å—Ç—É—Ä—ã:</span> {lastAnalysis.textures.join(', ')}
                </div>
              )}

              {lastAnalysis.patterns.length > 0 && (
                <div>
                  <span className="text-pink-400">–ü–∞—Ç—Ç–µ—Ä–Ω—ã:</span> {lastAnalysis.patterns.join(', ')}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default WalletImageAnalyzer;
