
import { useEffect, useState } from 'react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default function AppBootstrap() {
  const [storeLoaded, setStoreLoaded] = useState(false);
  const [storeInstanceId, setStoreInstanceId] = useState<string>('loading');

  useEffect(() => {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç store –≤–Ω—É—Ç—Ä–∏ useEffect
    const loadThemeStore = async () => {
      try {
        const themeStoreModule = await import('@/state/themeStore');
        setStoreInstanceId(themeStoreModule.THEME_STORE_INSTANCE_ID);
        setStoreLoaded(true);
        console.log('[Bootstrap] Theme store loaded, instance ID:', themeStoreModule.THEME_STORE_INSTANCE_ID);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º defaultTheme.json —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try {
          console.log('[Bootstrap] Starting to load default theme');
          const response = await fetch('/themes/defaultTheme.json');
          if (response.ok) {
            const defaultTheme = await response.json();
            console.log('[Bootstrap] Loading default theme');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º getState() –≤–º–µ—Å—Ç–æ —Ö—É–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è setTheme
            themeStoreModule.useThemeStore.getState().setTheme(defaultTheme);
          } else {
            console.warn('[Bootstrap] Failed to load default theme');
          }
        } catch (error) {
          console.error('[Bootstrap] Error loading default theme:', error);
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º Runtime Mapping Engine –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
        try {
          const { setupMappingWatcher } = await import('@/services/runtimeMappingEngine');
          setupMappingWatcher(() => themeStoreModule.useThemeStore.getState().theme);
          console.log('[Bootstrap] üîå Runtime Mapping Engine connected');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è Runtime Engine
          const { jsonBridge } = await import('@/services/jsonBridgeService');
          await jsonBridge.loadElementMappings();
          console.log('[Bootstrap] üó∫Ô∏è Element mappings loaded:', jsonBridge.getAllMappings().length);
        } catch (error) {
          console.error('[Bootstrap] ‚ùå Failed to connect Runtime Mapping Engine:', error);
        }
      } catch (error) {
        console.error('[Bootstrap] Failed to import theme store:', error);
        setStoreInstanceId('error');
      }
    };

    loadThemeStore();
  }, []);

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥
  useEffect(() => {
    if (storeInstanceId !== 'loading' && storeInstanceId !== 'error') {
      console.log('[Bootstrap] Theme store instance ID:', storeInstanceId);
    }
  }, [storeInstanceId]);

  return null; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç UI
}
