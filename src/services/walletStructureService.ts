
import { supabase } from '@/integrations/supabase/client';

export interface WalletStructureResponse {
  success: boolean;
  structure: any;
  metadata: {
    totalElements: number;
    version: string;
    timestamp: string;
  };
}

export class WalletStructureService {
  private static structure: any = null;
  private static isLoading = false;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤
   */
  static async getWalletStructure(): Promise<WalletStructureResponse> {
    try {
      if (this.structure) {
        console.log('üîÑ Using cached wallet structure');
        return this.structure;
      }

      if (this.isLoading) {
        console.log('‚è≥ Structure already loading, waiting...');
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        return this.getWalletStructure();
      }

      this.isLoading = true;
      console.log('üì° Fetching wallet structure from API...');

      const { data, error } = await supabase.functions.invoke('wallet-customization-structure', {
        method: 'GET'
      });

      if (error) {
        console.error('‚ùå Error fetching wallet structure:', error);
        throw new Error(`Failed to fetch wallet structure: ${error.message}`);
      }

      if (!data.success) {
        throw new Error('API returned unsuccessful response');
      }

      this.structure = data;
      this.isLoading = false;

      console.log(`‚úÖ Wallet structure loaded successfully!`);
      console.log(`üìä Total customizable elements: ${data.metadata.totalElements}`);
      console.log(`üéØ Ready for AI Agents integration!`);

      // –°–¥–µ–ª–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
      if (typeof window !== 'undefined') {
        (window as any).walletStructure = data;
        (window as any).applyCustomTheme = this.applyCustomTheme;
        console.log('üåê Wallet structure made globally available on window.walletStructure');
      }

      return data;

    } catch (error) {
      this.isLoading = false;
      console.error('üí• Failed to load wallet structure:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤)
   */
  static async applyCustomTheme(theme: any): Promise<void> {
    try {
      console.log('üé® Theme ready for application:', theme);
      
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ AI –∞–≥–µ–Ω—Ç–∞–º
      
      const { data, error } = await supabase.functions.invoke('wallet-customization-structure', {
        method: 'POST',
        body: {
          theme,
          userId: 'current-user', // –í –±—É–¥—É—â–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ auth
          action: 'apply-theme'
        }
      });

      if (error) {
        console.error('‚ùå Error applying theme:', error);
        throw new Error(`Failed to apply theme: ${error.message}`);
      }

      console.log('‚úÖ Theme application response:', data);
      
    } catch (error) {
      console.error('üí• Failed to apply theme:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º
   */
  static async getExampleThemes(): Promise<any> {
    const structure = await this.getWalletStructure();
    return structure.structure.exampleThemes;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤
   */
  static async getAIAgentsInstructions(): Promise<any> {
    const structure = await this.getWalletStructure();
    return structure.structure.aiAgentsInstructions;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API
   */
  static async healthCheck(): Promise<any> {
    try {
      const { data, error } = await supabase.functions.invoke('wallet-customization-structure/health', {
        method: 'GET'
      });

      if (error) {
        throw new Error(`Health check failed: ${error.message}`);
      }

      console.log('‚úÖ Wallet Structure API health check passed:', data);
      return data;

    } catch (error) {
      console.error('‚ùå Health check failed:', error);
      throw error;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static async exportForDebug(): Promise<any> {
    const structure = await this.getWalletStructure();
    return {
      structure: structure.structure,
      metadata: structure.metadata,
      timestamp: new Date().toISOString(),
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'server'
    };
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (typeof window !== 'undefined') {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  WalletStructureService.getWalletStructure().catch(error => {
    console.warn('‚ö†Ô∏è Failed to auto-initialize wallet structure:', error);
  });
}

export default WalletStructureService;
