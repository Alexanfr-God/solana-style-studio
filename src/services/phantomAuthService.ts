
import { supabase } from '@/integrations/supabase/client';

export interface PhantomAuthResult {
  success: boolean;
  user?: any;
  error?: string;
}

export const phantomAuthService = {
  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Phantom –∫–æ—à–µ–ª–µ–∫
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase auth —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º –∫–∞–∫ email
   */
  async authenticateWithPhantom(publicKey: string, signature: Uint8Array): Promise<PhantomAuthResult> {
    try {
      console.log('üîê Authenticating with Phantom wallet:', publicKey);
      
      // –°–æ–∑–¥–∞–µ–º "email" –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Supabase auth
      const walletEmail = `${publicKey}@phantom.wallet`;
      
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
      let authResult = await supabase.auth.signInWithPassword({
        email: walletEmail,
        password: publicKey // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –ø–∞—Ä–æ–ª—å
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
      if (authResult.error && authResult.error.message.includes('Invalid login credentials')) {
        console.log('üë§ Creating new user for wallet:', publicKey);
        
        authResult = await supabase.auth.signUp({
          email: walletEmail,
          password: publicKey,
          options: {
            data: {
              wallet_address: publicKey,
              wallet_type: 'phantom',
              signature: Array.from(signature).join(',') // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            }
          }
        });
      }

      if (authResult.error) {
        console.error('‚ùå Supabase auth error:', authResult.error);
        return {
          success: false,
          error: authResult.error.message
        };
      }

      console.log('‚úÖ Successfully authenticated wallet user:', publicKey);
      return {
        success: true,
        user: authResult.data.user
      };

    } catch (error) {
      console.error('‚ùå Phantom auth service error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Authentication failed'
      };
    }
  },

  /**
   * –í—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async signOut(): Promise<void> {
    await supabase.auth.signOut();
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentUser() {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
  }
};
