
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

/**
 * Analyzes a user drawing and generates a polished mask for wallet customization
 */
export async function generateMaskFromDrawing(
  drawingImageBase64: string
): Promise<{ imageUrl: string; layoutJson: any } | undefined> {
  try {
    console.log('üé® === –ù–ê–ß–ê–õ–û –ì–ï–ù–ï–†–ê–¶–ò–ò –ú–ê–°–ö–ò ===');
    console.log('–†–∞–∑–º–µ—Ä —Ä–∏—Å—É–Ω–∫–∞:', drawingImageBase64.length);
    console.log('–ü—Ä–µ–≤—å—é —Ä–∏—Å—É–Ω–∫–∞:', drawingImageBase64.substring(0, 100));
    
    // Create safe zone definition - for 1024x1024 square canvas with centered wallet
    const safeZone = {
      x: (1024 - 320) / 2,
      y: (1024 - 569) / 2,
      width: 320,
      height: 569
    };
    
    console.log('–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞:', safeZone);
    
    // Call the Supabase function with retries
    let attempts = 0;
    const maxAttempts = 3;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${attempts}/${maxAttempts}`);
      
      try {
        const requestPayload = {
          drawingImage: drawingImageBase64,
          safeZone,
          hd_quality: true
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Supabase —Ñ—É–Ω–∫—Ü–∏—é...');
        const startTime = Date.now();
        
        const { data, error } = await supabase.functions.invoke('generate-mask-from-drawing', {
          body: requestPayload
        });

        const endTime = Date.now();
        console.log(`‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempts}:`, error);
          console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2));
          if (attempts < maxAttempts) {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            await new Promise(resolve => setTimeout(resolve, 1000)); // –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            continue;
          }
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫—É: ${error.message}`);
        }

        console.log('üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(data, null, 2));

        if (!data || !data.mask_image_url) {
          console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempts}:`, data);
          if (attempts < maxAttempts) {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            await new Promise(resolve => setTimeout(resolve, 1000)); // –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            continue;
          }
          return createFallbackResponse();
        }

        // Enhanced URL validation
        const imageUrl = data.mask_image_url;
        console.log('üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
        console.log('–¢–∏–ø URL:', typeof imageUrl);
        console.log('–î–ª–∏–Ω–∞ URL:', imageUrl.length);
        console.log('URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', imageUrl.substring(0, 50));
        
        // Test URL accessibility
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL...');
        try {
          const testResponse = await fetch(imageUrl, { 
            method: 'HEAD',
            mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
          });
          console.log('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ URL:', testResponse.status);
          
          if (testResponse.status === 0) {
            console.log('‚úÖ URL –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CORS, –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)');
          } else if (!testResponse.ok) {
            console.warn(`‚ö†Ô∏è URL –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${testResponse.status}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
          } else {
            console.log('‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω');
          }
        } catch (urlError) {
          console.error('‚ùå –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL –Ω–µ —É–¥–∞–ª—Å—è:', urlError);
          console.log('ü§∑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS');
        }

        const result = {
          imageUrl: imageUrl,
          layoutJson: data.layout_json || {}
        };

        console.log('‚úÖ === –£–°–ü–ï–®–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ê–°–ö–ò ===');
        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', result.imageUrl);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        toast.success('–ú–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ AI!', {
          description: '–í–∞—à–∏ –∫—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É'
        });
        
        return result;
      } catch (attemptError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ ${attempts}:`, attemptError);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –ø–æ–ø—ã—Ç–∫–∏:', attemptError.stack);
        if (attempts < maxAttempts) {
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
          await new Promise(resolve => setTimeout(resolve, 1000)); // –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
          continue;
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        console.log('üíÄ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        toast.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–∞—Å–∫–∞.');
        return createFallbackResponse();
      }
    }
    
    // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑-–∑–∞ —Ü–∏–∫–ª–∞ while, –Ω–æ TypeScript —Ç—Ä–µ–±—É–µ—Ç return
    return createFallbackResponse();
    
  } catch (error) {
    console.error('üí• === –ü–†–û–í–ê–õ –ì–ï–ù–ï–†–ê–¶–ò–ò –ú–ê–°–ö–ò ===');
    console.error('–û—à–∏–±–∫–∞ –≤ drawToMaskService.generateMaskFromDrawing:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return createFallbackResponse();
  }
}

/**
 * Creates a consistent fallback response when mask generation fails
 */
function createFallbackResponse(): { imageUrl: string; layoutJson: any } {
  const fallbackMaskUrl = '/external-masks/abstract-mask.png';
  
  console.log('üö® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–∞—Å–∫–∞:', fallbackMaskUrl);
  
  return {
    imageUrl: fallbackMaskUrl,
    layoutJson: {
      layout: {
        top: "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ä–µ–∑–µ—Ä–≤)",
        bottom: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ä–µ–∑–µ—Ä–≤)",
        left: null,
        right: null,
        core: "untouched"
      },
      style: "abstract",
      color_palette: ["#6c5ce7", "#fd79a8", "#00cec9"]
    }
  };
}
