import { Connection, clusterApiUrl, PublicKey, LAMPORTS_PER_SOL, Transaction } from '@solana/web3.js';
import type { WalletAdapter } from '@solana/wallet-adapter-base';

// Generic wallet adapter interface (–¥–ª—è AppKit/WalletConnect)
interface GenericWalletAdapter {
  publicKey: any;
  signTransaction: (tx: Transaction) => Promise<Transaction>;
  signAllTransactions?: (txs: Transaction[]) => Promise<Transaction[]>;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Helius RPC ‚Üí clusterApiUrl('devnet')
 */
export function getConnection(): Connection {
  const heliusRpc = import.meta.env.VITE_HELIUS_RPC_DEVNET;
  const endpoint = heliusRpc || clusterApiUrl('devnet');
  
  console.log('üîó Connecting to Solana:', endpoint.includes('helius') ? 'Helius Devnet' : 'Public Devnet');
  
  return new Connection(endpoint, 'confirmed');
}

/**
 * –ó–∞–ø—Ä–æ—Å–∏—Ç—å airdrop –Ω–∞ devnet (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å < 0.5 SOL)
 */
export async function requestDevnetAirdrop(walletAddress: string): Promise<void> {
  const connection = getConnection();
  const publicKey = new PublicKey(walletAddress);
  
  try {
    const balance = await connection.getBalance(publicKey);
    const balanceInSol = balance / LAMPORTS_PER_SOL;
    
    console.log('üí∞ Current balance:', balanceInSol, 'SOL');
    
    if (balanceInSol < 0.5) {
      console.log('üì• Requesting 2 SOL airdrop...');
      const signature = await connection.requestAirdrop(publicKey, 2 * LAMPORTS_PER_SOL);
      await connection.confirmTransaction(signature);
      console.log('‚úÖ Airdrop successful');
    } else {
      console.log('‚úÖ Balance sufficient, skipping airdrop');
    }
  } catch (error) {
    console.error('‚ùå Airdrop failed:', error);
    throw new Error('Failed to request devnet airdrop');
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å WalletAdapter-–æ–±—ë—Ä—Ç–∫—É –¥–ª—è Metaplex –∏–∑ "—Å—ã—Ä–æ–≥–æ" signer'–∞
 */
function makeMetaplexAdapter(signer: GenericWalletAdapter): WalletAdapter {
  const pk = signer.publicKey instanceof PublicKey
    ? signer.publicKey
    : new PublicKey(
        typeof signer.publicKey === 'string'
          ? signer.publicKey
          : signer.publicKey.toBase58()
      );

  return {
    name: 'WCC-AppKit-Adapter',
    url: '',
    icon: '',
    readyState: 'Installed',
    publicKey: pk,
    connecting: false,
    connected: true,
    autoConnect: false,
    supportedTransactionVersions: null,
    
    async connect() {},
    async disconnect() {},
    
    async sendTransaction(transaction: Transaction, connection: Connection) {
      const signed = await signer.signTransaction(transaction);
      const signature = await connection.sendRawTransaction(signed.serialize());
      return signature;
    },
    
    async signTransaction<T extends Transaction>(tx: T): Promise<T> {
      return await signer.signTransaction(tx as Transaction) as T;
    },
    
    async signAllTransactions<T extends Transaction>(txs: T[]): Promise<T[]> {
      if (signer.signAllTransactions) {
        return await signer.signAllTransactions(txs as Transaction[]) as T[];
      }
      return await Promise.all(txs.map(tx => signer.signTransaction(tx as Transaction))) as T[];
    },
    
    on() {},
    off() {},
  } as unknown as WalletAdapter;
}

/**
 * –ú–∏–Ω—Ç NFT –Ω–∞ Solana devnet —á–µ—Ä–µ–∑ Metaplex
 */
export async function mintThemeNft(
  walletAdapter: GenericWalletAdapter,
  metadataUri: string,
  themeName: string
): Promise<{ mint: PublicKey; transaction: string; explorerUrl: string }> {
  
  console.log('üé® Minting NFT:', themeName);
  console.log('üìç Metadata URI:', metadataUri);
  console.log('üëõ Wallet:', walletAdapter.publicKey.toString());
  
  try {
    const connection = getConnection();
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Metaplex - –≥—Ä—É–∑–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ "Mint"
    console.log('üì¶ Loading Metaplex SDK...');
    const { Metaplex, walletAdapterIdentity } = await import('@metaplex-foundation/js');
    
    // ‚úÖ –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Metaplex
    const adapter = makeMetaplexAdapter(walletAdapter);
    
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω walletAdapterIdentity
    const metaplex = Metaplex.make(connection).use(walletAdapterIdentity(adapter));
    
    // –ú–∏–Ω—Ç NFT
    const { nft, response } = await metaplex.nfts().create({
      uri: metadataUri,
      name: `WCC: ${themeName}`,
      symbol: 'WCC',
      sellerFeeBasisPoints: 0,
      isMutable: false,
    });
    
    const transaction = response.signature;
    const explorerUrl = `https://explorer.solana.com/tx/${transaction}?cluster=devnet`;
    
    console.log('‚úÖ NFT minted successfully!');
    console.log('üé´ Mint address:', nft.address.toBase58());
    console.log('üîó Explorer:', explorerUrl);
    
    return {
      mint: nft.address,
      transaction,
      explorerUrl
    };
    
  } catch (error) {
    console.error('‚ùå Minting failed:', error);
    throw error;
  }
}
