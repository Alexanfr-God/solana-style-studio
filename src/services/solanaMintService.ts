import { Connection, clusterApiUrl, PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';
import { Metaplex, walletAdapterIdentity } from '@metaplex-foundation/js';
import type { WalletContextState } from '@solana/wallet-adapter-react';

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Helius RPC ‚Üí clusterApiUrl('devnet')
 */
export function getConnection(): Connection {
  const heliusRpc = import.meta.env.VITE_HELIUS_RPC_DEVNET;
  const endpoint = heliusRpc || clusterApiUrl('devnet');
  
  console.log('üîó Connecting to Solana:', endpoint.includes('helius') ? 'Helius Devnet' : 'Public Devnet');
  
  return new Connection(endpoint, 'confirmed');
}

/**
 * –ó–∞–ø—Ä–æ—Å–∏—Ç—å airdrop –Ω–∞ devnet (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å < 0.5 SOL)
 */
export async function requestDevnetAirdrop(walletAddress: string): Promise<void> {
  const connection = getConnection();
  const publicKey = new PublicKey(walletAddress);
  
  try {
    const balance = await connection.getBalance(publicKey);
    const balanceInSol = balance / LAMPORTS_PER_SOL;
    
    console.log('üí∞ Current balance:', balanceInSol, 'SOL');
    
    if (balanceInSol < 0.5) {
      console.log('üì• Requesting 2 SOL airdrop...');
      const signature = await connection.requestAirdrop(publicKey, 2 * LAMPORTS_PER_SOL);
      await connection.confirmTransaction(signature);
      console.log('‚úÖ Airdrop successful');
    } else {
      console.log('‚úÖ Balance sufficient, skipping airdrop');
    }
  } catch (error) {
    console.error('‚ùå Airdrop failed:', error);
    throw new Error('Failed to request devnet airdrop');
  }
}

/**
 * –ú–∏–Ω—Ç NFT –Ω–∞ Solana devnet —á–µ—Ä–µ–∑ Metaplex
 */
export async function mintThemeNft(
  wallet: WalletContextState,
  metadataUri: string,
  themeName: string
): Promise<{ mint: PublicKey; transaction: string; explorerUrl: string }> {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ wallet
  if (!wallet.connected || !wallet.publicKey) {
    throw new Error('Wallet not connected');
  }
  
  if (!wallet.signTransaction) {
    throw new Error('Wallet does not support signing transactions');
  }
  
  console.log('üé® Minting NFT:', themeName);
  console.log('üìç Metadata URI:', metadataUri);
  console.log('üëõ Wallet:', wallet.publicKey.toBase58());
  
  try {
    const connection = getConnection();
    const metaplex = Metaplex.make(connection)
      .use(walletAdapterIdentity(wallet));
    
    // –ú–∏–Ω—Ç NFT
    const { nft, response } = await metaplex.nfts().create({
      uri: metadataUri,
      name: `WCC: ${themeName}`,
      symbol: 'WCC',
      sellerFeeBasisPoints: 0,
      isMutable: false,
    });
    
    const transaction = response.signature;
    const explorerUrl = `https://explorer.solana.com/tx/${transaction}?cluster=devnet`;
    
    console.log('‚úÖ NFT minted successfully!');
    console.log('üé´ Mint address:', nft.address.toBase58());
    console.log('üîó Explorer:', explorerUrl);
    
    return {
      mint: nft.address,
      transaction,
      explorerUrl
    };
    
  } catch (error) {
    console.error('‚ùå Minting failed:', error);
    throw error;
  }
}
