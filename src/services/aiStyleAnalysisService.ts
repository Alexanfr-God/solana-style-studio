
import { supabase } from '@/integrations/supabase/client';

export interface StyleAnalysisRequest {
  imageUrl: string;
  prompt?: string;
  walletType?: string;
  layerType?: 'login' | 'wallet';
}

export interface StyleAnalysisResult {
  backgroundColor: string;
  backgroundImage?: string;
  accentColor: string;
  textColor: string;
  buttonColor: string;
  buttonTextColor: string;
  borderRadius: string;
  fontFamily: string;
  boxShadow?: string;
  styleNotes?: string;
}

export interface AnalysisResponse {
  success: boolean;
  result?: StyleAnalysisResult;
  error?: string;
  processingTime?: string;
}

class AiStyleAnalysisService {
  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è —Å –ø–æ–º–æ—â—å—é AI
   */
  async analyzeStyle(request: StyleAnalysisRequest): Promise<AnalysisResponse> {
    const startTime = Date.now();
    
    try {
      console.log('üé® Starting AI style analysis...', {
        imageUrl: request.imageUrl,
        walletType: request.walletType,
        layerType: request.layerType,
        hasPrompt: !!request.prompt
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º wallet-chat-gpt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
      const { data, error } = await supabase.functions.invoke('wallet-chat-gpt', {
        body: {
          content: request.prompt || 'Analyze this image and create wallet style',
          imageUrl: request.imageUrl,
          walletContext: {
            walletType: request.walletType || 'phantom',
            activeLayer: request.layerType || 'wallet'
          },
          mode: 'analysis'
        }
      });

      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000;

      if (error) {
        console.error('‚ùå AI style analysis error:', error);
        throw new Error(`Style analysis failed: ${error.message}`);
      }

      console.log('‚úÖ AI style analysis completed:', {
        duration: `${duration}s`,
        success: data?.success,
        hasStyleChanges: !!data?.styleChanges
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å styleChanges –≤ –æ—Ç–≤–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (data?.styleChanges) {
        return {
          success: true,
          result: data.styleChanges,
          processingTime: `${duration.toFixed(1)}s`
        };
      }

      // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
      const fallbackStyle: StyleAnalysisResult = {
        backgroundColor: '#1a1a2e',
        accentColor: '#16213e',
        textColor: '#ffffff',
        buttonColor: '#0f3460',
        buttonTextColor: '#ffffff',
        borderRadius: '8px',
        fontFamily: 'Inter, sans-serif',
        styleNotes: 'Generated fallback style based on image analysis'
      };

      return {
        success: true,
        result: fallbackStyle,
        processingTime: `${duration.toFixed(1)}s`
      };

    } catch (error) {
      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000;
      
      console.error('üí• Error in AI style analysis:', {
        error: error.message,
        duration: `${duration}s`
      });
      
      return {
        success: false,
        error: error.message,
        processingTime: `${duration.toFixed(1)}s`
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveAnalysisResult(request: StyleAnalysisRequest, result: StyleAnalysisResult): Promise<void> {
    try {
      console.log('üíæ Saving analysis result to database...');

      const { error } = await supabase
        .from('ai_requests')
        .insert({
          prompt: request.prompt,
          image_url: request.imageUrl,
          layer_type: request.layerType,
          style_result: result,
          status: 'completed'
        });

      if (error) {
        console.error('‚ùå Error saving analysis result:', error);
        throw new Error(`Failed to save result: ${error.message}`);
      }

      console.log('‚úÖ Analysis result saved successfully');
    } catch (error) {
      console.error('üí• Error in saveAnalysisResult:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤
   */
  async getAnalysisHistory(limit: number = 10): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .from('ai_requests')
        .select('*')
        .eq('status', 'completed')
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) {
        throw new Error(`Failed to fetch history: ${error.message}`);
      }

      return data || [];
    } catch (error) {
      console.error('üí• Error fetching analysis history:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  async createStyleFromPrompt(prompt: string, layerType?: 'login' | 'wallet'): Promise<AnalysisResponse> {
    return this.analyzeStyle({
      imageUrl: '', // –ü—É—Å—Ç–æ–π imageUrl –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      prompt,
      layerType
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const aiStyleAnalysisService = new AiStyleAnalysisService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { StyleAnalysisRequest, StyleAnalysisResult, AnalysisResponse };
