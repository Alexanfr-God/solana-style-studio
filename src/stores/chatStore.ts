import { create } from 'zustand';
import { ChatMessage } from '@/components/chat/ChatInterface';
import { supabase } from '@/integrations/supabase/client';
import { useWalletCustomizationStore } from './walletCustomizationStore';
import { WALLET_ELEMENTS_REGISTRY, getAllCategories } from '@/components/wallet/WalletElementsRegistry';
import { walletStructureService } from '@/services/walletStructureService';
import { toast } from 'sonner';

function detectLanguage(text: string): 'ru' | 'en' {
  return /[\u0400-\u04FF]/.test(text) ? 'ru' : 'en';
}

export type ChatMode = 'analysis' | 'leonardo' | 'replicate';
export type ImageGenerationMode = 'analysis' | 'leonardo' | 'replicate';

interface ChatState {
  messages: ChatMessage[];
  isLoading: boolean;
  chatMode: ChatMode;
  sessionId: string;
  userId: string | null;
  chatHistory: Record<string, ChatMessage[]>;
  
  // ‚úÖ –≠–¢–ê–ü 4: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  styleHistory: Array<{
    timestamp: string;
    changes: any;
    description: string;
  }>;
  
  // Image generation mode
  imageGenerationMode: ImageGenerationMode;
  setImageGenerationMode: (mode: ImageGenerationMode) => void;
  
  // Mode setters
  setChatMode: (mode: ChatMode) => void;
  setSessionId: (sessionId: string) => void;
  setUserId: (userId: string | null) => void;
  
  // Core message sending methods
  sendMessage: (message: {
    content: string;
    imageUrl?: string | null;
    walletElement?: string;
  }) => Promise<void>;
  
  sendImageGenerationMessage: (message: {
    content: string;
    mode: 'leonardo' | 'replicate';
  }) => Promise<void>;
  
  sendStyleAnalysis: (message: {
    content: string;
    imageUrl?: string;
    analysisDepth?: 'basic' | 'detailed' | 'comprehensive';
  }) => Promise<void>;
  
  // Utility methods
  clearHistory: () => void;
  applyStyleChanges: (changes: any) => void;
  applyGeneratedImage: (imageUrl: string) => void;
  preserveAndMergeStyles: (newChanges: any) => any;
  
  // ‚úÖ –≠–¢–ê–ü 4: –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  addToStyleHistory: (changes: any, description: string) => void;
  getStyleHistory: () => Array<{timestamp: string; changes: any; description: string;}>;
  
  // Chat history management
  saveChatHistory: () => void;
  loadChatHistory: (sessionId: string) => void;
  clearChatHistory: (sessionId: string) => void;
}

// Function to create enhanced wallet context with current state analysis
function createEnhancedWalletContext() {
  const walletStore = useWalletCustomizationStore.getState();
  
  return {
    walletType: 'Phantom Wallet (WalletAlivePlayground)',
    activeLayer: walletStore.currentLayer || 'wallet',
    currentStyle: {
      backgroundColor: walletStore.walletStyle.backgroundColor,
      primaryColor: walletStore.walletStyle.primaryColor,
      font: walletStore.walletStyle.font,
      textColor: walletStore.walletStyle.textColor,
      accentColor: walletStore.walletStyle.accentColor,
      buttonColor: walletStore.walletStyle.buttonColor,
      borderRadius: walletStore.walletStyle.borderRadius,
      backgroundImage: walletStore.walletStyle.backgroundImage,
    },
    availableElements: WALLET_ELEMENTS_REGISTRY.map(element => ({
      id: element.id,
      name: element.name,
      category: element.category,
      description: element.description,
      customizable: element.customizable
    })),
    elementCategories: getAllCategories(),
    totalElements: WALLET_ELEMENTS_REGISTRY.length,
    walletFeatures: {
      hasBottomNavigation: true,
      hasBalanceDisplay: true,
      hasActionButtons: true,
      hasTransactionHistory: true,
      hasAssetsList: true,
      supportsDarkMode: true,
      supportsCustomBackgrounds: true
    },
    uiStructure: {
      layout: 'mobile-first',
      sections: ['header', 'balance', 'actions', 'content', 'navigation'],
      interactiveElements: ['buttons', 'tabs', 'dropdowns', 'modals'],
      customizableAreas: ['backgrounds', 'colors', 'typography', 'effects']
    }
  };
}

// ‚úÖ –≠–¢–ê–ü 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è imageUrl
function extractImageUrl(response: any, mode: string): string | null {
  console.log('üîç [–≠–¢–ê–ü 2] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ imageUrl –¥–ª—è —Ä–µ–∂–∏–º–∞:', mode);
  console.log('üîç [–≠–¢–ê–ü 2] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response, null, 2));
  
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º data.imageUrl (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Edge Function)
  if (response?.data?.imageUrl) {
    console.log('‚úÖ [–≠–¢–ê–ü 2] –ù–∞–π–¥–µ–Ω imageUrl –≤ data:', response.data.imageUrl);
    return response.data.imageUrl;
  }
  
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π imageUrl –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  if (response?.imageUrl) {
    console.log('‚úÖ [–≠–¢–ê–ü 2] –ù–∞–π–¥–µ–Ω imageUrl –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ:', response.imageUrl);
    return response.imageUrl;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  if (mode === 'leonardo') {
    if (response?.data?.data?.imageUrl) {
      console.log('‚úÖ [–≠–¢–ê–ü 2] Leonardo nested format:', response.data.data.imageUrl);
      return response.data.data.imageUrl;
    }
  }
  
  if (mode === 'replicate') {
    if (response?.data?.output && Array.isArray(response.data.output) && response.data.output.length > 0) {
      console.log('‚úÖ [–≠–¢–ê–ü 2] Replicate output array:', response.data.output[0]);
      return response.data.output[0];
    }
  }
  
  console.warn('‚ö†Ô∏è [–≠–¢–ê–ü 2] imageUrl –ù–ï –ù–ê–ô–î–ï–ù –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —Ä–µ–∂–∏–º–∞:', mode);
  console.warn('‚ö†Ô∏è [–≠–¢–ê–ü 2] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Object.keys(response || {}));
  return null;
}

// Convert GPT responses to style changes
function convertGPTResponseToStyleChanges(gptResponse: any): any {
  console.log('üîÑ Converting GPT response to style changes:', gptResponse);
  
  if (gptResponse.styleChanges) {
    const styleChanges = gptResponse.styleChanges;
    console.log('‚úÖ Found direct styleChanges format');
    
    return {
      backgroundColor: styleChanges.backgroundColor,
      backgroundImage: styleChanges.backgroundImage,
      accentColor: styleChanges.accentColor,
      textColor: styleChanges.textColor,
      buttonColor: styleChanges.buttonColor,
      buttonTextColor: styleChanges.buttonTextColor,
      borderRadius: styleChanges.borderRadius,
      fontFamily: styleChanges.fontFamily,
      boxShadow: styleChanges.boxShadow,
      primaryColor: styleChanges.accentColor || styleChanges.buttonColor,
      font: styleChanges.fontFamily,
      gradient: styleChanges.gradient,
      styleNotes: styleChanges.styleNotes || gptResponse.userText || 'AI style analysis applied'
    };
  }

  if (gptResponse.elements && gptResponse.elements.colors) {
    const colors = gptResponse.elements.colors;
    const typography = gptResponse.elements.typography || {};
    const effects = gptResponse.elements.effects || {};
    
    console.log('‚úÖ Found enhanced format with elements.colors');
    
    return {
      backgroundColor: colors.background || colors.primary,
      textColor: colors.text || colors.secondary,
      accentColor: colors.accent || colors.primary,
      buttonColor: colors.primary,
      buttonTextColor: colors.secondary || colors.text,
      borderRadius: gptResponse.elements.spacing?.borderRadius || '12px',
      fontFamily: typography.fontFamily || 'Inter, sans-serif',
      boxShadow: effects.boxShadow,
      gradient: effects.gradient,
      styleNotes: gptResponse.metadata?.style_reasoning || 'GPT style analysis applied'
    };
  }
  
  console.warn('‚ö†Ô∏è Unknown GPT response format, using fallback');
  return null;
}

export const useChatStore = create<ChatState>((set, get) => ({
  messages: [],
  isLoading: false,
  chatMode: 'analysis',
  sessionId: `session_${Date.now()}`,
  userId: null,
  chatHistory: {},
  
  // ‚úÖ –≠–¢–ê–ü 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π
  styleHistory: [],
  
  // Image generation mode
  imageGenerationMode: 'analysis',
  setImageGenerationMode: (mode) => {
    console.log('üîÑ Switching image generation mode to:', mode);
    set({ imageGenerationMode: mode });
  },

  setChatMode: (mode) => {
    console.log('üîÑ Switching chat mode to:', mode);
    set({ chatMode: mode });
  },

  setSessionId: (sessionId) => {
    console.log('üÜî Setting session ID:', sessionId);
    set({ sessionId });
  },

  setUserId: (userId) => {
    console.log('üë§ Setting user ID:', userId);
    set({ userId });
  },

  // ‚úÖ –≠–¢–ê–ü 4: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –ù–ï –°–¢–ò–†–ê–ï–¢ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏
  preserveAndMergeStyles: (newChanges) => {
    const walletStore = useWalletCustomizationStore.getState();
    const currentStyle = walletStore.walletStyle;
    
    console.log('üîÑ [–≠–¢–ê–ü 4] –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º:', currentStyle);
    console.log('üîÑ [–≠–¢–ê–ü 4] –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', newChanges);
    
    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏ + –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    const mergedChanges = {
      // –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å—Ç–∏–ª–∏
      backgroundColor: currentStyle.backgroundColor,
      primaryColor: currentStyle.primaryColor,
      font: currentStyle.font,
      textColor: currentStyle.textColor,
      accentColor: currentStyle.accentColor,
      buttonColor: currentStyle.buttonColor,
      borderRadius: currentStyle.borderRadius,
      backgroundImage: currentStyle.backgroundImage,
      boxShadow: currentStyle.boxShadow,
      fontFamily: currentStyle.fontFamily,
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã)
      ...newChanges
    };
    
    console.log('‚úÖ [–≠–¢–ê–ü 4] –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è:', mergedChanges);
    return mergedChanges;
  },

  // ‚úÖ –≠–¢–ê–ü 4: –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  addToStyleHistory: (changes, description) => {
    const historyEntry = {
      timestamp: new Date().toISOString(),
      changes,
      description
    };
    
    console.log('üìù [–≠–¢–ê–ü 4] –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∏–ª–µ–π:', historyEntry);
    
    set(state => ({
      styleHistory: [...state.styleHistory, historyEntry].slice(-50) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }));
  },

  getStyleHistory: () => {
    return get().styleHistory;
  },

  sendMessage: async (messageData) => {
    const { messages, sessionId } = get();
    
    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      type: 'user',
      content: messageData.content,
      timestamp: new Date(),
      imageUrl: messageData.imageUrl || undefined,
      walletElement: messageData.walletElement || undefined,
    };

    set({ 
      messages: [...messages, userMessage],
      isLoading: true 
    });

    try {
      console.log('üöÄ Sending analysis message to Edge Function:', {
        content: messageData.content,
        hasImage: !!messageData.imageUrl,
        element: messageData.walletElement,
        sessionId
      });

      const enhancedWalletContext = createEnhancedWalletContext();
      
      const { data, error } = await supabase.functions.invoke('wallet-chat-gpt', {
        body: {
          content: messageData.content,
          imageUrl: messageData.imageUrl,
          walletElement: messageData.walletElement,
          walletContext: enhancedWalletContext,
          mode: 'analysis',
          sessionId
        }
      });

      if (error) {
        console.error('‚ùå Supabase function error:', error);
        throw new Error(`Edge function error: ${error.message}`);
      }

      if (!data?.success) {
        console.error('‚ùå GPT API error:', data?.error);
        throw new Error(data?.error || 'Failed to get AI response');
      }

      console.log('üìä Full GPT response data:', data);

      const lang = detectLanguage(messageData.content);
      const fallback = lang === 'ru'
        ? '–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –∏ –ø—Ä–∏–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.'
        : 'I analyzed your wallet and applied the requested changes.';
      const friendlyResponse = data.userText || data.response || fallback;
      
      if (data.styleChanges) {
        console.log('üé® Processing style changes from GPT with PRESERVATION:', data.styleChanges);
        
        const convertedChanges = convertGPTResponseToStyleChanges(data);
        
        if (convertedChanges) {
          const preservedChanges = get().preserveAndMergeStyles(convertedChanges);
          console.log('‚úÖ Successfully converted and preserved style changes:', preservedChanges);
          
          const walletStore = useWalletCustomizationStore.getState();
          walletStore.applyUniversalStyle(preservedChanges);
        }
      }

      const assistantMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        type: 'assistant',
        content: friendlyResponse,
        timestamp: new Date(),
      };

      set(state => ({
        messages: [...state.messages, assistantMessage],
        isLoading: false
      }));

      console.log('‚úÖ Analysis response processed successfully');

    } catch (error) {
      console.error('‚ùå Error sending analysis message:', error);
      
      set(state => ({
        messages: [...state.messages, {
          id: `error-${Date.now()}`,
          type: 'assistant',
          content: 'Sorry, there was an error connecting to AI. Please try again later.',
          timestamp: new Date(),
        }],
        isLoading: false
      }));
    }
  },

  sendImageGenerationMessage: async (messageData) => {
    const { messages, sessionId } = get();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—Ö–æ–¥–µ
    console.log('üñºÔ∏è [–û–¢–õ–ê–î–ö–ê] sendImageGenerationMessage –≤—ã–∑–≤–∞–Ω:');
    console.log('üîç [–û–¢–õ–ê–î–ö–ê] –í—Ö–æ–¥–Ω–æ–π —Ä–µ–∂–∏–º:', messageData.mode);
    console.log('üîç [–û–¢–õ–ê–î–ö–ê] –¢–µ–∫—É—â–∏–π imageGenerationMode:', get().imageGenerationMode);
    console.log('üîç [–û–¢–õ–ê–î–ö–ê] –ü—Ä–æ–º–ø—Ç:', messageData.content);
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ä–µ–∂–∏–º —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
    const actualMode = get().imageGenerationMode;
    if (actualMode === 'analysis') {
      console.error('‚ùå [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ analysis!');
      console.error('‚ùå [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –≠—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ Leonardo');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Leonardo –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ analysis
      set({ imageGenerationMode: 'leonardo' });
      messageData.mode = 'leonardo';
    } else {
      messageData.mode = actualMode as 'leonardo' | 'replicate';
    }
    
    console.log('‚úÖ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', messageData.mode);
    
    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      type: 'user',
      content: messageData.content,
      timestamp: new Date(),
    };

    set({ 
      messages: [...messages, userMessage],
      isLoading: true 
    });

    try {
      console.log('üöÄ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      console.log('üìã [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
        content: messageData.content,
        mode: messageData.mode,
        sessionId,
        isImageGeneration: true
      });

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ä–µ–∂–∏–º —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ Edge Function
      const response = await supabase.functions.invoke('wallet-chat-gpt', {
        body: { 
          content: messageData.content, 
          mode: messageData.mode, // ‚úÖ –ß–µ—Ç–∫–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
          sessionId,
          isImageGeneration: true, // ‚úÖ –Ø–≤–Ω—ã–π —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          debugMode: true // ‚úÖ –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
        }
      });

      console.log('üì• [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Edge Function:', JSON.stringify(response, null, 2));

      if (response?.error) {
        console.error('‚ùå [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û—à–∏–±–∫–∞ Edge Function:', response.error);
        throw new Error(`Image generation error: ${response.error.message}`);
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ imageUrl
      let generatedImageUrl = null;
      
      if (response?.data?.imageUrl) {
        generatedImageUrl = response.data.imageUrl;
        console.log('‚úÖ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ù–∞–π–¥–µ–Ω imageUrl –≤ data:', generatedImageUrl);
      } else if (response?.data?.data?.imageUrl) {
        generatedImageUrl = response.data.data.imageUrl;
        console.log('‚úÖ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ù–∞–π–¥–µ–Ω imageUrl –≤ data.data:', generatedImageUrl);
      } else if (response?.data?.output && Array.isArray(response.data.output)) {
        generatedImageUrl = response.data.output[0];
        console.log('‚úÖ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ù–∞–π–¥–µ–Ω imageUrl –≤ output:', generatedImageUrl);
      }
      
      if (generatedImageUrl && (generatedImageUrl.startsWith('http') || generatedImageUrl.startsWith('data:image'))) {
        console.log('üé® [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', generatedImageUrl);
        
        get().applyGeneratedImage(generatedImageUrl);
        
        toast.success(`üé® Generated image automatically applied as wallet background!`, {
          description: `Mode: ${messageData.mode} | Time: ${new Date().toLocaleTimeString()}`,
          duration: 4000
        });
        
        const assistantMessage: ChatMessage = {
          id: `assistant-${Date.now()}`,
          type: 'assistant',
          content: `‚ú® I've generated and automatically applied a custom background image based on your description: "${messageData.content}". The new background is now active on your wallet while preserving your existing styling!`,
          timestamp: new Date(),
          imageUrl: generatedImageUrl,
          isGenerated: true,
          autoApplied: true,
        };

        set(state => ({
          messages: [...state.messages, assistantMessage],
          isLoading: false
        }));
        
        console.log('‚úÖ [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–≤—Ç–æ-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.error('‚ùå [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π imageUrl');
        throw new Error('No valid image returned from generation service');
      }

    } catch (error) {
      console.error('üí• [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      
      toast.error(`‚ùå Image generation failed: ${error.message}`, {
        description: `Mode: ${messageData.mode} | Check console for details`,
        duration: 6000
      });
      
      set(state => ({
        messages: [...state.messages, {
          id: `error-${Date.now()}`,
          type: 'assistant',
          content: `Sorry, there was an error generating the image: ${error.message}. Please check the console logs for more details.`,
          timestamp: new Date(),
        }],
        isLoading: false
      }));
    }
  },

  sendStyleAnalysis: async (messageData) => {
    const { messages, sessionId } = get();
    
    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      type: 'user',
      content: messageData.content,
      timestamp: new Date(),
      imageUrl: messageData.imageUrl,
    };

    set({ 
      messages: [...messages, userMessage],
      isLoading: true 
    });

    try {
      console.log('üé® Sending style analysis to Edge Function');

      const enhancedWalletContext = createEnhancedWalletContext();

      const { data, error } = await supabase.functions.invoke('wallet-chat-gpt', {
        body: {
          content: messageData.content,
          mode: 'analysis',
          sessionId,
          imageUrl: messageData.imageUrl,
          analysisDepth: messageData.analysisDepth || 'detailed',
          walletContext: enhancedWalletContext
        }
      });

      if (error) {
        throw new Error(`Style analysis failed: ${error.message}`);
      }

      if (!data?.success) {
        throw new Error(data?.error || 'Failed to analyze style');
      }

      if (data.styleChanges) {
        const convertedChanges = convertGPTResponseToStyleChanges(data);
        if (convertedChanges) {
          const preservedChanges = get().preserveAndMergeStyles(convertedChanges);
          const walletStore = useWalletCustomizationStore.getState();
          walletStore.applyUniversalStyle(preservedChanges);
        }
      }

      const lang = detectLanguage(messageData.content);
      const fallback = lang === 'ru'
        ? '–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Å—Ç–∏–ª—å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏–ª —É–ª—É—á—à–µ–Ω–∏—è.'
        : 'I analyzed your wallet style and applied improvements.';

      const assistantMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        type: 'assistant',
        content: data.userText || data.analysis || fallback,
        timestamp: new Date(),
      };

      set(state => ({
        messages: [...state.messages, assistantMessage],
        isLoading: false
      }));

      console.log('‚úÖ Style analysis completed');

    } catch (error) {
      console.error('‚ùå Style analysis error:', error);
      
      set(state => ({
        messages: [...state.messages, {
          id: `error-${Date.now()}`,
          type: 'assistant',
          content: `Style analysis failed: ${error.message}`,
          timestamp: new Date(),
        }],
        isLoading: false
      }));
    }
  },

  // ‚úÖ –≠–¢–ê–ü 4: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π applyGeneratedImage —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  applyGeneratedImage: (imageUrl: string) => {
    console.log('üñºÔ∏è [–≠–¢–ê–ü 4] –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:', imageUrl);
    
    const walletStore = useWalletCustomizationStore.getState();
    
    // ‚úÖ –≠–¢–ê–ü 4: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ç–µ–∫—É—â–∏–µ —Å—Ç–∏–ª–∏
    const preservedChanges = get().preserveAndMergeStyles({
      backgroundImage: `url(${imageUrl})`,
    });
    
    console.log('üé® [–≠–¢–ê–ü 4] –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π:', preservedChanges);
    
    // ‚úÖ –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    get().addToStyleHistory(
      { backgroundImage: `url(${imageUrl})` },
      `Generated background image applied at ${new Date().toLocaleTimeString()}`
    );
    
    walletStore.applyUniversalStyle(preservedChanges);
    
    console.log('‚úÖ [–≠–¢–ê–ü 4] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π');
  },

  applyStyleChanges: (changes) => {
    console.log('üé® Applying style changes with preservation');
    
    if (changes && changes.changes) {
      const preservedChanges = get().preserveAndMergeStyles(changes.changes);
      const walletStore = useWalletCustomizationStore.getState();
      walletStore.applyUniversalStyle(preservedChanges);
      
      // ‚úÖ –≠–¢–ê–ü 4: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      get().addToStyleHistory(changes.changes, 'Style changes applied via chat');
    }
  },

  saveChatHistory: () => {
    const { sessionId, messages, chatHistory } = get();
    
    set({
      chatHistory: {
        ...chatHistory,
        [sessionId]: [...messages]
      }
    });
    
    console.log('üíæ Chat history saved for session:', sessionId);
  },

  loadChatHistory: (sessionId) => {
    const { chatHistory } = get();
    
    const history = chatHistory[sessionId] || [];
    set({ 
      messages: history,
      sessionId 
    });
    
    console.log('üì• Chat history loaded for session:', sessionId);
  },

  clearChatHistory: (sessionId) => {
    const { chatHistory } = get();
    
    const newHistory = { ...chatHistory };
    delete newHistory[sessionId];
    
    set({ chatHistory: newHistory });
    console.log('üóëÔ∏è Chat history cleared for session:', sessionId);
  },

  clearHistory: () => {
    set({ messages: [] });
    console.log('üóëÔ∏è Current chat messages cleared');
  },
}));
